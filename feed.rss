<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Andrew Marmion</title><description>Coding carefully, deliberately, and with humility.</description><link>https://andrewmarmion.com</link><language>en</language><lastBuildDate>Thu, 21 Jan 2021 13:43:22 +0000</lastBuildDate><pubDate>Thu, 21 Jan 2021 13:43:22 +0000</pubDate><ttl>250</ttl><atom:link href="https://andrewmarmion.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Reachability-in-SwiftUI</guid><title>NWPathMonitor the new Reachability</title><description>How to check for network connectivity in SwiftUI</description><link>https://andrewmarmion.com/posts/Reachability-in-SwiftUI</link><pubDate>Thu, 21 Jan 2021 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>Back when I first started creating iOS apps checking for network connectivity was done use Reachability. This was convoluted and difficult to understand (or to make work consistently). I remember using Ashley Mills' <a href="https://github.com/ashleymills/Reachability.swift">Reachability</a>, amazingly this is still actively updated (at time of writing 6 months ago).</p><p>At WWDC 2018 Apple did the following talk <a href="https://developer.apple.com/videos/play/wwdc2018/715/?time=3400">Introducing Network.framework: A modern alternative to Sockets</a>, a scary title but there is a fantastic gem at around the 57 minute. Apple introduces the NWPathMonitor. This means that we no longer have to monitor Reachability and/or predict the reachability of a given host. NWPathMonitor watches the connectivity state and then provides updates when that changes.</p><p>So how do we use this? Firstly, we create an instance of the <code>NWPathMonitor</code>, then from that instance we set the <code>pathUpdateHandler</code>, we also need to define a queue for the monitor to run on.</p><pre><code><span class="keyword">let</span> monitor = <span class="type">NWPathMonitor</span>()
monitor.<span class="property">pathUpdateHandler</span> = { path <span class="keyword">in
    if</span> path.<span class="property">status</span> == .<span class="dotAccess">satisfied</span> {
        <span class="call">print</span>(<span class="string">"Connected"</span>)
    } <span class="keyword">else</span> {
        <span class="call">print</span>(<span class="string">"Disconected"</span>)
    }
}

<span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"Monitor"</span>)
monitor.<span class="call">start</span>(queue: queue)
</code></pre><br /><p>The <code>pathUpdateHandler</code> returns a <code>NWPath.Status</code>. This status is an enum with three cases <code>unsatisfied</code> (the path is not available for use), <code>statisfied</code> (the path is available to establish connections and send data), and <code>requiresConnection</code> (the path is not currently available but establishing a new connection may activate the path).</p><p>If we are only interested in knowing if we have a connection or not then we can just look to see if the status is <code>satisfied</code> or not, as I have done above.</p><p>The <code>NWPathMonitor</code> has several different initialisers an empty initialiser that monitors all network events and two others. The first <code>init(requiredInterfaceType:)</code>, monitors a only specific type of connection so we could monitor <code>wifi</code>, <code>cellular</code> etc , and the second <code>init(prohibitedInterfaceTypes:)</code> which watches all but the prohibited types. The different types are contained in the enum <code>NWInterface.InterfaceType</code></p><ul><li><code>wifi</code></li><li><code>cellular</code></li><li><code>wiredEthernet</code></li><li><code>loopback</code></li><li><code>other</code></li></ul><br /><p>In the apps that I have built I haven't needed to use anything other than the empty initialiser for the <code>NWPathMonitor</code>.</p><p>So let's see this in a sample app.</p><p>One thing that is annoying is that the status that is returned from the <code>pathUpdateHandler</code> is <code>NWPath.Status</code> which means to use it you have to import <code>Network</code>. This is fine in the file that we are using the <code>NWPathMonitor</code> but we don't really want to import <code>Network</code> everywhere in our app, so we should create our own enum that exposes the state for us. There are three states that are returned and we could handle them all, but for simplicity we are just going to handle them as either <em>connected</em> or <em>disconnected</em>.</p><pre><code><span class="keyword">enum</span> NetworkStatus {
    <span class="keyword">case</span> connected
    <span class="keyword">case</span> disconnected
}
</code></pre><br /><p>If we are to use this in a SwiftUI app we can take advantage of <code>ObservedObject</code> and the <code>@Published</code> property wrapper to construct a class that monitors our network.</p><pre><code><span class="keyword">import</span> Network

<span class="keyword">class</span> Monitor: <span class="type">ObservableObject</span> {
    <span class="keyword">private let</span> monitor = <span class="type">NWPathMonitor</span>()
    <span class="keyword">private let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"Monitor"</span>)

    <span class="keyword">@Published var</span> status: <span class="type">NetworkStatus</span> = .<span class="dotAccess">connected</span>

    <span class="keyword">init</span>() {
        monitor.<span class="property">pathUpdateHandler</span> = { [<span class="keyword">weak self</span>] path <span class="keyword">in
            guard let self</span> = <span class="keyword">self else</span> { <span class="keyword">return</span> }

            <span class="comment">// Monitor runs on a background thread so we need to publish 
            // on the main thread</span>
            <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
                <span class="keyword">if</span> path.<span class="property">status</span> == .<span class="dotAccess">satisfied</span> {
                    <span class="call">print</span>(<span class="string">"We're connected!"</span>)
                    <span class="keyword">self</span>.<span class="property">status</span> = .<span class="dotAccess">connected</span>

                } <span class="keyword">else</span> {
                    <span class="call">print</span>(<span class="string">"No connection."</span>)
                    <span class="keyword">self</span>.<span class="property">status</span> = .<span class="dotAccess">disconnected</span>
                }
            }
        }
        monitor.<span class="call">start</span>(queue: queue)
    }
}
</code></pre><br /><p>Next we can use this in our application. We should probably only have one instance of this running in our application so using it as an <code>EnvironmentObject</code> seems like the best way to go.</p><pre><code><span class="keyword">@main
struct</span> MyApp: <span class="type">App</span> {
    <span class="keyword">let</span> monitor = <span class="type">Monitor</span>()
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">ContentView</span>()
                .<span class="call">environmentObject</span>(monitor)
        }
    }
}
</code></pre><br /><p>Then we can access this in our <code>ContentView</code> in the following way.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@EnvironmentObject var</span> monitor: <span class="type">Monitor</span>
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    
        <span class="keyword">switch</span> monitor.<span class="property">status</span> {
        <span class="keyword">case</span> .<span class="dotAccess">connected</span>: 
            <span class="type">Text</span>(<span class="string">"Connected"</span>)
            
        <span class="keyword">case</span> .<span class="dotAccess">disconnected</span>:
            <span class="type">Text</span>(<span class="string">"Disconnected"</span>)
        }
    }
}
</code></pre><br /><p>So if we are running this on a simulator or device we can use the <code>NetworkLinkConditioner</code> to simulate loss of connectivity. <a href="https://nshipster.com/network-link-conditioner/">NSHipster</a> has a great article on how to use it.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Dynamically-updating-your-Info-plist</guid><title>Dynamically updating your Info.plist</title><description>How to add properties to your Info.plist during a build phase using PlistBuddy.</description><link>https://andrewmarmion.com/posts/Dynamically-updating-your-Info-plist</link><pubDate>Fri, 15 Jan 2021 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>One of the many things that I have had to do as an iOS developer is to update the Info.plist. This is fairly straight forward to do and it can be done inside of Xcode. A lesser known technique is that it can be done via the terminal using PlistBuddy.</p><p>Doing it via the terminal has several advantages over editing it via Xcode. Firstly you may wish to dynamically add values to your plist that update frequently (for example the latest commit hash). You could keep updating a User-Defined value in the build settings but this could get tedious and you are liable to forget to do it. It is much better to automate the process. Another reason is that you might want to dynamically add a value to the plist, for example you want to add <code>UIFileSharingEnabled</code> for certain configurations but not for others. As far as I can tell you cannot add a User-Defined value for these, so it leaves us at a deadend - or does it?</p><p>You can add and set values in your plist using <code>PlistBuddy</code>. It is fairly straight forward to use but there are some gotchas that I will point out along the way.</p><p>The basic format of a command for <code>PlistBuddy</code> is as follows:</p><pre><code>/usr/libexec/<span class="type">PlistBuddy</span> -c '&lt;command&gt; :&lt;key&gt; &lt;type&gt; &lt;value&gt;' &lt;file_name&gt;

</code></pre><br /><h3>Common commands</h3><ul><li>Add</li><li>Set</li><li>Delete</li></ul><br /><h3>Common types</h3><ul><li>string</li><li>array</li><li>dict</li><li>bool</li><li>real</li><li>integer</li><li>date</li><li>data</li></ul><br /><p>So if we wanted to add a key to your plist (this incidentally will also create the plist if it doesn't exist) we could do the following:</p><pre><code>/usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Add</span> :<span class="type">UIFileSharingEnabled</span> bool <span class="type">YES</span>' <span class="type">Info</span>.<span class="property">plist</span>

</code></pre><br /><p>This adds the UIFileSharingEnabled key with a boolean value of YES (true) to the plist.</p><p>If we were to run this command again it will tell us the following:</p><p><code>Add: ":UIFileSharingEnabled" Entry Already Exists</code>.<br><br>This results in a non-zero exit. Which is not ideal.</p><p>So if the key already exists in the plist you should not run the Add command, you should run the Set command.</p><pre><code>/usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Set</span> :<span class="type">UIFileSharingEnabled</span> bool <span class="type">YES</span>' <span class="type">Info</span>.<span class="property">plist</span>

</code></pre><br /><p>And if you want to delete a key from the plist then, surprisingly enough, you should use the Delete command. Note we don't need to pass the <code>type</code> or <code>value</code> when we delete an entry.</p><pre><code>/usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Delete</span> :<span class="type">UIFileSharingEnabled</span>' <span class="type">Info</span>.<span class="property">plist</span>

</code></pre><br /><p>So recently I was asked to enable <code>UIFileSharingEnabled</code> and <code>LSSupportsOpeningDocumentsInPlace</code> on the development and test builds for an internal app that we manage.</p><p>One of the requirements was that we didn't want to have the values permanently stored in the plist. This gave a couple of options: dynamically add the entries at build time and then remove them in a post build action (this is do able but it does mean that you are having to perform actions in multiple locations so it is not ideal). The other way was to edit the Info.plist once it had been copied to the build directory but before the app is signed. This would mean that there is no teardown required after the plist was updated so there is only one location that holds the code and needs to be maintained.</p><p>So I wrote the following bash script that resides in the build phases on my xcproject as a run-script. At a high-level it does the following. It switches on the configuration, constructs the location of the plist, loops of the different keys that we wish to add, checks if the key exists, adds or sets the key accordingly.</p><pre><code><span class="keyword">case</span> <span class="string">"${CONFIGURATION}"</span> <span class="keyword">in</span>

<span class="string">"dev"</span> | <span class="string">"uat"</span> )

info_plist=<span class="string">"${BUILT_PRODUCTS_DIR}/${EXECUTABLE_FOLDER_PATH}/Info.plist"</span>

echo <span class="string">"Enabling iTunes file sharing.."</span>

<span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">"UIFileSharingEnabled" "LSSupportsOpeningDocumentsInPlace"</span>;
    <span class="keyword">do</span>
        # <span class="type">Check</span> to see <span class="keyword">if</span> the value exists <span class="keyword">in</span> the plist
        val=$(/usr/libexec/<span class="type">PlistBuddy</span> -c 'print <span class="string">":"</span>'${item}'<span class="string">""</span>' <span class="string">"${info_plist}"</span> <span class="number">2</span>&gt;/dev/null);
        
        # <span class="type">Capture</span> exit code
        exitCode=$? 

        <span class="keyword">if</span> [ $exitCode == <span class="number">0</span> ] 
            then
            echo <span class="string">"Setting key $item to YES"</span>
            /usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Set</span> :<span class="string">"'${item}'"</span> bool <span class="type">YES</span>' <span class="string">"${info_plist}"</span>;

            <span class="keyword">else</span>
            echo <span class="string">"Adding key $item as YES"</span>
            /usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Add</span> :<span class="string">"'${item}'"</span> bool <span class="type">YES</span>' <span class="string">"${info_plist}"</span>;
        fi
    done
;;


*)
;;
esac
</code></pre><br /><p>Let's go through it in more detail.</p><pre><code><span class="keyword">case</span> <span class="string">"${CONFIGURATION}"</span> <span class="keyword">in</span>

<span class="string">"dev"</span> | <span class="string">"uat"</span> )
    # perform <span class="keyword">some</span> action here
;;


*)
;;
esac
</code></pre><br /><p>This is bascially a switch statement that switches over the current configuration that is being built. I am only interested in this code running when it is for <code>dev</code> and <code>uat</code> so that is what this handles. The <code>*</code> handles the default value of the switch, where we do nothing.</p><br /><pre><code>info_plist=<span class="string">"${BUILT_PRODUCTS_DIR}/${EXECUTABLE_FOLDER_PATH}/Info.plist"</span>

echo <span class="string">"Enabling iTunes file sharing.."</span>
</code></pre><br /><p>This constructs the path of the built Info.plist and stores it as a variable <code>info_plist</code>. We then write to the log using the <code>echo</code> command.</p><br /><pre><code><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">"UIFileSharingEnabled" "LSSupportsOpeningDocumentsInPlace"</span>;
    <span class="keyword">do</span>
        # <span class="keyword">do</span> something here with the item
    done
;;
</code></pre><br /><p>This is a for-loop that allows us to loop over the strings that we have, and then execute any code for each item.</p><br /><pre><code># <span class="type">Check</span> to see <span class="keyword">if</span> the value exists <span class="keyword">in</span> the plist
val=$(/usr/libexec/<span class="type">PlistBuddy</span> -c 'print <span class="string">":"</span>'${item}'<span class="string">""</span>' <span class="string">"${info_plist}"</span> <span class="number">2</span>&gt;/dev/null);

# <span class="type">Capture</span> exit code
exitCode=$? 
</code></pre><br /><p>This code checks to see if the looped item is included in the the plist. If we try to add an item to the plist when it already exists we get a non-zero exit code. Similarly when we try to set an item that doesn't exist then we get a non-zero exit code. We may in the future add the values permanently to the plist so we need to check if they exist and then handle it appropriately.</p><p>We also capture the exit code so that we can check if it is zero or not (it will be zero in the case that the key exists in the plist).</p><pre><code><span class="keyword">if</span> [ $exitCode == <span class="number">0</span> ] 
    then
    echo <span class="string">"Setting key $item to YES"</span>
    /usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Set</span> :<span class="string">"'${item}'"</span> bool <span class="type">YES</span>' <span class="string">"${info_plist}"</span>;

    <span class="keyword">else</span>
    echo <span class="string">"Adding key $item as YES"</span>
    /usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Add</span> :<span class="string">"'${item}'"</span> bool <span class="type">YES</span>' <span class="string">"${info_plist}"</span>;
fi
</code></pre><br /><p>Finally we can check if the exit code is zero or not and perform the appropriate action.</p><p>So we are pretty much done. However there is one issue left to resolve and this is the gotcha. If we add this script as a build phase it will be executed before the Info.plist is copied across and our changes will be lost. 😢</p><p>So to fix this we need to make the script depend upon the existence of the Info.plist, we can do this by adding the following to the required Input files<br><br><code>$(BUILT_PRODUCTS_DIR)/$(EXECUTABLE_FOLDER_PATH)/Info.plist</code></p><p>For good measure I also uncheck <code>Based on dependency analysis</code> which will make this script run for all incremental builds.</p><p>Your build phase should now look something like this*:</p><a href="https://imgur.com/z6P4CVa.jpg">
<img src="https://i.imgur.com/z6P4CVa.jpg" style="width:600px;" />
</a><p>*unfortunately my screen isn't big enough to show all the code but you can see the main points that are required.</p><p>Because we have added a file to our input list we could update the setting of our <code>info_plist</code> variable to the folllowing:</p><pre><code>info_plist=<span class="string">"${SCRIPT_INPUT_FILE_0}"</span>

</code></pre><br /><p>All input files can be accessed in this way, they are contained in an array and are accessed via their index. This now means that we only need to manage the location of the Info.plist in the input files and not inside the script.</p><pre><code><span class="keyword">case</span> <span class="string">"${CONFIGURATION}"</span> <span class="keyword">in</span>

<span class="string">"dev"</span> | <span class="string">"uat"</span> )

info_plist=<span class="string">"${SCRIPT_INPUT_FILE_0}"</span> # &lt;- updated to use the input file

echo <span class="string">"Enabling iTunes file sharing.."</span>

<span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">"UIFileSharingEnabled" "LSSupportsOpeningDocumentsInPlace"</span>;
    <span class="keyword">do</span>
        # <span class="type">Check</span> to see <span class="keyword">if</span> the value exists <span class="keyword">in</span> the plist
        val=$(/usr/libexec/<span class="type">PlistBuddy</span> -c 'print <span class="string">":"</span>'${item}'<span class="string">""</span>' <span class="string">"${info_plist}"</span> <span class="number">2</span>&gt;/dev/null);
        
        # <span class="type">Capture</span> exit code
        exitCode=$? 

        <span class="keyword">if</span> [ $exitCode == <span class="number">0</span> ] 
            then
            echo <span class="string">"Setting key $item to YES"</span>
            /usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Set</span> :<span class="string">"'${item}'"</span> bool <span class="type">YES</span>' <span class="string">"${info_plist}"</span>;

            <span class="keyword">else</span>
            echo <span class="string">"Adding key $item as YES"</span>
            /usr/libexec/<span class="type">PlistBuddy</span> -c '<span class="type">Add</span> :<span class="string">"'${item}'"</span> bool <span class="type">YES</span>' <span class="string">"${info_plist}"</span>;
        fi
    done
;;


*)
;;
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Basic-Core-Data</guid><title>Basic Core Data</title><description>Adding Core Data to an iOS app</description><link>https://andrewmarmion.com/posts/Basic-Core-Data</link><pubDate>Wed, 6 Jan 2021 17:28:00 +0000</pubDate><content:encoded><![CDATA[<p>One thing that many developers struggle with when starting out is getting their head around Core Data. It is not as intuitive as it could be and there are lots of pitfalls that you can unstick you. I am going to do a series of posts about Core Data.</p><p>So let's dive in.</p><p>Firstly you can allow Xcode to setup Core Data for you. This is a double edged sword. It is bad because it hides a lot of the complexity from you making it hard to understand what is happening but it is also good because it hides a lot of the complexity from you allowing you to get started quickly.</p><p>We aren't going to let Xcode do all the work for us, but we will let it handle our managed objects. So let's begin by creating a new iOS app and selecting SwiftUI.</p><br /><a href="https://i.imgur.com/HyOSUZX.png">
<img src="https://i.imgur.com/HyOSUZX.png" title="App Type" style="width:400px;" />
</a><br /><br /><p>I am using Xcode 12.3 and the new SwiftUI App lifecycle methods. Not <strong>do not</strong> check the Core Data checkbox, we are going to set it up ourselves. Note that I have named the app BasicCoreData. You can give it whatever name you like.</p><p>I would suggest <strong>NOT</strong> calling it CoreData as that may cause some issues as we are using the CoreData framework it can cause the compiler to get confused. But prepending it with Basic works just fine.</p><br /><a href="https://i.imgur.com/CciBx0v.png">
<img src="https://i.imgur.com/CciBx0v.png" title="App Details" style="width:400px;"/>
</a><br /><br /><p>Once you have done that click next and save your project, you can save it on the desktop if that is easiest.</p><p>Next we need to add the Data Model to the project. This is where you can manage your Entities, the objects that are stored.</p><p>So making sure you have ContentView highlighted (this is so that the file is added in the correct place) press CMD + N or you can go File -&gt; New -&gt; File. This brings up the new file template selector, from here we can add lots of different file types. We want to add a Data Model. So type "model" in the search box on the top right and it will filter our options. Select Data Model and click next.</p><br /><a href="https://i.imgur.com/sGET3Oj.png">
<img src="https://i.imgur.com/sGET3Oj.png" title="Data Model" style="width:400px;"/>
</a><br /><br /><p>Now you have to enter a name for your Data Model. Xcode defaults to Model, which we will use here, but you can call it whatever you like. Previously Xcode used to name it after your app so in our case it would have been called BasicCoreData.</p><p>Once you have entered the name you want, press next.</p><br /><a href="https://i.imgur.com/x8ZFkqB.png">
<img src="https://i.imgur.com/x8ZFkqB.png" title="Naming the data model" style="width:400px;"/>
</a><br /><br /><p>Now that you have a Data Model in your project, your Project Navigator should look like this.</p><br /><a href="https://i.imgur.com/d24nNzZ.png">
<img src="https://i.imgur.com/d24nNzZ.png" title="Project Navigator with Data Model"/>
</a><br /><br /><p>We are going to need to add one more file to our project before we get everything working. Add a new file, this time choosing a Swift file. Name it <code>Storage.swift</code></p><p>Your Project Navigator should now look like this.</p><br /><a href="https://i.imgur.com/zH04agP.png">
<img src="https://i.imgur.com/zH04agP.png" title="Project Navigator with Storage.swfit" />
</a><br /><br /><p>Now that are all the files we need for this added we are going to. Create our first Entity.</p><p>If you click on the <code>Model.xcdatamodeld</code> in your Project Navigator you should see the following.</p><br /><a href="https://i.imgur.com/lK8DG9I.png">
<img src="https://i.imgur.com/lK8DG9I.png" title="The model with no entities" style="width:400px;" />
</a><br /><br /><p>This is where you add your Entities (basically the models that we want to store in Core Data). We can do a lot here but we are going to just create a very simple Entity. It will be called Person and have one attiribute: name.</p><p>Down at the bottom you will see a circular button with a big plus sign in the middle of it. This is the <code>Add Entity</code> button. Give it a tap and you should see an entry appear in the top left (called Entity). Double clicking on the name Entity allows us to change it to what we want. So change it to Person.</p><p>Next we are going to add the attribute. These are the data values on your entity/model. So click the plus button under the Attributes table and it will add a new attribute called <code>attribute</code> and a type of <code>Undefined</code>. Double click the attribute and change it to <code>name</code> and change its type to String. We are almost done. If you cannot see the Data Model Inspector CMD + OPTION + 4 to make it appear. Make sure that you make the Optional checkbox is unchecked.</p><p>Unchecking the Optional checkbox tells Xcode that we want the value that is stored in CoreData to not be optional (there is another gotcha coming up but we will discuss it when we get to it). This just means that we cannot create a Person entity with name that is nil.</p><p>So you should be looking at something like this.</p><br /><a href="https://i.imgur.com/jXm8lOD.png">
<img src="https://i.imgur.com/jXm8lOD.png" title="Entity has been added" style="width:400px;" />
</a><br /><br /><p>Now let's build the project, press CMD + B. Xcode now does a little magic for us. It secretly creates the data structure for the Person entity that we just setup. It is possible to do this manually and I will go over that in an upcoming post, but for a simple app we don't need to worry about that additional complexity.</p><p>So far we have got ourselves to a place where we are ready to start writing some code. Lets begin with our Storage.swift file.</p><p>Inside here we are going to create a class that will load the Data Model we created and allow us to add and remove Person entities to it.</p><br /><pre><code><span class="keyword">class</span> Storage {
    <span class="keyword">let</span> persistentContainer: <span class="type">NSPersistentContainer</span>

    <span class="keyword">init</span>() {
        persistentContainer = <span class="type">NSPersistentContainer</span>(name: <span class="string">"Model"</span>)

        persistentContainer.<span class="call">loadPersistentStores</span> { storeDescription, error <span class="keyword">in
            if let</span> error = error {
                <span class="call">fatalError</span>(<span class="string">"Unable to load Core Data. Error:</span> \(error)<span class="string">"</span>)
            }
        }
    }
}
</code></pre><br /><p>So what have we done here? Well we have created an instance of NSPersistentContainer and passing it the name of the Data Model we created as a string. Make sure you type it correctly as it will cause a crash if you get it wrong. Once we have created the instance of NSPersistentContainer we the load the persistent stores. This loads Core Data's underlying stores, where it persists your data.</p><p>Now that we have that we want to add two functions to our class. One to fetch all the Person entities and one to add a new Person entity.</p><br /><pre><code><span class="keyword">func</span> fetchPeople() -&gt; [<span class="type">Person</span>] {
    <span class="keyword">let</span> fetchRequest: <span class="type">NSFetchRequest</span>&lt;<span class="type">Person</span>&gt; = <span class="type">Person</span>.<span class="call">fetchRequest</span>()

    <span class="keyword">do</span> {
        <span class="keyword">return try</span> persistentContainer.<span class="property">viewContext</span>.<span class="call">fetch</span>(fetchRequest)
    } <span class="keyword">catch</span> {
        <span class="call">print</span>(<span class="string">"Unable to fetch people:</span> \(error)<span class="string">"</span>)
        <span class="keyword">return</span> []
    }
}
</code></pre><br /><p>The above code creates an NSFetchRequest. The request there is straight forward and will return all Person entities that are stored. As fetch requests can throw we need to make sure we wrap it in a <code>do/catch</code> block in case it fails for any reason. If it does fail we will handle it gracefully and return and empty array.</p><br /><pre><code><span class="keyword">func</span> savePerson(with name: <span class="type">String</span>) {
    <span class="keyword">let</span> person = <span class="type">Person</span>(context: persistentContainer.<span class="property">viewContext</span>)
    person.<span class="property">name</span> = name

    <span class="keyword">do</span> {
        <span class="keyword">try</span> persistentContainer.<span class="property">viewContext</span>.<span class="call">save</span>()
        <span class="call">print</span>(<span class="string">"Saved person named:</span> \(name)<span class="string">"</span>)
    } <span class="keyword">catch</span> {
        persistentContainer.<span class="property">viewContext</span>.<span class="call">rollback</span>()
        <span class="call">print</span>(<span class="string">"Unable to save person:</span> \(error)<span class="string">"</span>)
    }
}
</code></pre><br /><p>Saving a person to Core Data is quite straight forward. First we create a Person passing it the current context. We then update its name to be the name that we want. Again saving can throw so we wrap this in a <code>do/catch</code> block. Note that if we fail to save we rollback the changes that we just made.</p><p>With Core Data you can make whatever changes you like, but they are not committed until you actually save them. The rollback drops all the current changes. Think of it like an Etch-a-Sketch, we can draw and draw on it but if we don't like what we have drawn we can shake it hard and we lose everything that we drew. This is what rollback does, it drops all the changes. Use it carefully, in our simple app using it here is fine.</p><p>Next we need to write some code to show that it works. Let's move over to <code>ContentView.swift</code>.</p><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {

    <span class="keyword">let</span> storage: <span class="type">Storage</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
            .<span class="call">padding</span>()
    }
}
</code></pre><br /><p>Add a storage property to your ContentView, like I have done above. This will cause a compiler error in the preview and in the BasicCoreDataApp. We can fix this by updating them respectively to be:</p><br /><pre><code><span class="keyword">struct</span> ContentView_Previews: <span class="type">PreviewProvider</span> {
    <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ContentView</span>(storage: <span class="type">Storage</span>())
    }
}
</code></pre><br /><pre><code><span class="keyword">@main
struct</span> BasicCoreDataApp: <span class="type">App</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">ContentView</span>(storage: <span class="type">Storage</span>())
        }
    }
}
</code></pre><br /><p>So now we can add some code to the <code>ContentView</code> to save and display the saved names. I am not going to use the <code>@FetchRequest</code> property wrapper as I feel that hides away what we are actually doing.</p><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {

    <span class="keyword">let</span> storage: <span class="type">Storage</span>

    <span class="keyword">@State private var</span> personName: <span class="type">String</span> = <span class="string">""</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">TextField</span>(<span class="string">"Enter name"</span>, text: $personName)
                .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>)
            <span class="type">Button</span>(action: save,
                   label: { <span class="type">Text</span>(<span class="string">"Save"</span>) })
            <span class="type">Spacer</span>()
        }
    }

    <span class="keyword">func</span> save() {
        <span class="keyword">if</span> !personName.<span class="property">isEmpty</span> {
            storage.<span class="call">savePerson</span>(with: personName)
            personName = <span class="string">""</span>
        }
    }
}
</code></pre><br /><p>So we have added a TextField that captures a Person's name. If the name is not empty, and the Save button is pressed it will attempt to save the Person into the Core Data store. It then clears the TextField ready for the next entry.</p><p>Press CMD + R to build and run this on a simulator. You will see the following in the console when you press save.</p><p><code>Saved person named: Mike</code></p><p>But wait a minute, we cannot see what we have saved in to the Core Data store. Let's update our code so that we can see what we have entered.</p><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {

    <span class="keyword">let</span> storage: <span class="type">Storage</span>

    <span class="keyword">@State private var</span> personName: <span class="type">String</span> = <span class="string">""</span>
    <span class="keyword">@State private var</span> people: [<span class="type">Person</span>] = []

    <span class="keyword">init</span>(storage: <span class="type">Storage</span>) {
        <span class="keyword">self</span>.<span class="property">storage</span> = storage
        _people = <span class="type">State</span>(initialValue: storage.<span class="call">fetchPeople</span>())
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">TextField</span>(<span class="string">"Enter name"</span>, text: $personName)
                .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>)
            <span class="type">Button</span>(action: save,
                   label: { <span class="type">Text</span>(<span class="string">"Save"</span>) })
            <span class="type">List</span> {
                <span class="type">ForEach</span>(people) { person <span class="keyword">in</span>
                    <span class="type">Text</span>(person.<span class="property">name</span> ?? <span class="string">""</span>)
                }
            }
        }
    }

    <span class="keyword">func</span> save() {
        <span class="keyword">if</span> !personName.<span class="property">isEmpty</span> {
            storage.<span class="call">savePerson</span>(with: personName)
            personName = <span class="string">""</span>
            people = storage.<span class="call">fetchPeople</span>()
        }
    }
}
</code></pre><br /><p>So we have added quite a lot to the <code>ContentView</code>. Firstly we added another state property for the array of Person objects that we plan to display. We have also added a custom initializer to the struct. The reason for this is we want to load the Person objects that we have stored when the view launches. We could do this with an <code>onAppear</code> modifier but I think it is better suited to the initializer. Note that we have to use <code>State(initialValue:)</code> to set the value on the people property, and that the people property is accessed via an underscore. This is something that we have to do when setting initial values for <code>@State</code>.</p><p>We have also added a list to our view. Notice that we are having to nil coalesce the value of name. This is because name is an optional String.</p><p>I know, I can hear you ask. Didn't we make name non-optional when we setup our Entity? Yes we did, you are correct. Firstly, it is non-optional for Core Data, however for Swift it is still an optional property. So to display it nicely we have to nil coalesce the value. We could write our own subclass of the managed object (rather than let Xcode handle it, like we did - that was the secret coding writing that Xcode did for us when we set up our entity) but that is beyond the scope of this post.</p><p>If you add the above code and CMD + R you should now see that the names you added before appear and any names you now add update the list.</p><p>But wouldn't it be nice to delete a row?</p><p>Well that is fairly straight forward. We just need to update our Storage class to have a delete function and add an onDelete method to the List in our ContentView.</p><p>As I mentioned before, we can make changes to our viewContext but they are not commited until we save it. So we can delete our Person object and then call save on the viewContext. Notice it is a similar approach that to that of saving a Person.</p><br /><pre><code><span class="keyword">func</span> deletePerson(<span class="keyword">_</span> person: <span class="type">Person</span>) {
    persistentContainer.<span class="property">viewContext</span>.<span class="call">delete</span>(person)
    <span class="keyword">do</span> {
        <span class="keyword">try</span> persistentContainer.<span class="property">viewContext</span>.<span class="call">save</span>()
    } <span class="keyword">catch</span> {
        persistentContainer.<span class="property">viewContext</span>.<span class="call">rollback</span>()
        <span class="call">print</span>(<span class="string">"Unable to delete person:</span> \(error)<span class="string">"</span>)
    }
}
</code></pre><br /><p>Next we have to update our ContentView. We add the following function to the ContentView</p><br /><pre><code><span class="keyword">func</span> delete(offsets: <span class="type">IndexSet</span>) {
    <span class="keyword">for</span> index <span class="keyword">in</span> offsets {
        <span class="keyword">let</span> person = people[index]
        storage.<span class="call">deletePerson</span>(person)
    }
    people.<span class="call">remove</span>(atOffsets: offsets)
}
</code></pre><br /><p>We need to pass an IndexSet because that is what the modifier <code>onDelete(perform:)</code> gives us. We then loop over the index deleting each Person from the Core Data store, once we have done that we remove the Person object from the people array at the given offsets.</p><p>We now need to add the <code>onDelete(perform:)</code> modifer to our List. Here is the updated body of our ContentView.</p><br /><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
        <span class="type">TextField</span>(<span class="string">"Enter name"</span>, text: $personName)
            .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>)
        <span class="type">Button</span>(action: save,
               label: { <span class="type">Text</span>(<span class="string">"Save"</span>) })
        <span class="type">List</span> {
            <span class="type">ForEach</span>(people) { person <span class="keyword">in</span>
                <span class="type">Text</span>(person.<span class="property">name</span> ?? <span class="string">""</span>)
            }
            .<span class="call">onDelete</span>(perform: delete)
        }
    }
}
</code></pre><br /><p>If you now build and run your project (CMD + R), you should be able to swipe to delete a row and it should update accordingly.</p><p>You should have something that looks like this:</p><img src="https://i.imgur.com/o7jof2a.gif" title="Adding and deleting a person" /><br /><br /><p>Thanks for reading and I hope that you found this useful.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Xcode12-manage-schemes-crash</guid><title>How to stop Xcode 12 crashing when editing or managing schemes</title><description>Xcode 12 keeps crashing when I try to edit or manage my schemes</description><link>https://andrewmarmion.com/posts/Xcode12-manage-schemes-crash</link><pubDate>Sat, 5 Dec 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>I have been plagued by an Xcode 12 issue. I think it started in Xcode 12.1, but it has definitely continued into Xcode 12.2.</p><p>Every time I try to edit or manage my schemes Xcode would crash.</p><p>However, there is a really simple work around for it. It transpires that this crash only occurs if you try to edit or manage a scheme while Xcode is open on a second monitor. Moving Xcode to my Macbook's screen stops the crash.</p><p>This is a really frustrating problem and I hope Apple fixes it soon; the work around is simple. Just make sure that you only try to edit or manage the schemes on the Macbook's screen rather than on an external monitor.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Setting-custom-spacing-on-a-stackview</guid><title>Setting custom spacing on a UIStackView</title><description>How to use setCustomSpacing(:after:) on a UIStackView</description><link>https://andrewmarmion.com/posts/Setting-custom-spacing-on-a-stackview</link><pubDate>Fri, 27 Nov 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>So I was reading <a href="https://twitter.com/daveverwer">Dave Verwer</a>'s latest issue of <a href="https://iosdevweekly.com/issues/484#1CUQjJ3">iOS Dev Weekly</a> where I came across this mindblowing tip on setting custom spacing in a <code>UIStackView</code>. The tip comes from <a href="https://twitter.com/sarunw">Sarun Wongpatcharapakorn</a>, who does a fantastic write up of it on his <a href="https://sarunw.com/posts/custom-uistackview-spacing/">blog</a> .</p><p>The basic usage is as follows:</p><pre><code><span class="keyword">let</span> vStackView = <span class="type">UIStackView</span>()
vStackView.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>

vStackView.<span class="call">addArrangedSubview</span>(movieLabel)
vStackView.<span class="call">addArrangedSubview</span>(quoteLabel)
vStackView.<span class="call">setCustomSpacing</span>(<span class="number">10</span>, after: quoteLabel)
vStackView.<span class="call">addArrangedSubview</span>(authorLabel)
</code></pre><br /><p>This will set a custom spacing on the <code>UIStackView</code> but only after the <code>quoteLabel</code>.</p><p>It is worthwhile noting that there are some caveats that you should be aware of.</p><ul><li>The <code>.setCustomSpacing(:after:)</code> has to come after the added view.</li><li>Issues can arise with your layout if you hide or remove views from your stackview. Sarun goes into detail anout them in his <a href=" https://sarunw.com/posts/custom-uistackview-spacing/">post</a>.</li></ul><br /><p>Regardless this is fantastic. Apparently it has been around since iOS 11!!!! I wish I had known about this sooner, though a lot of the apps I work on have been supporting iOS 10+ so it wouldn't have mattered too much.</p><p>In a current hobby project I have nested <code>UIStackView</code>'s and I wonderd if I could achieve the same affect using <code>UIStackView(arrangedSubviews:)</code> initialiser. And would you know it, it works!</p><p>So the above code could be replaced with the following.</p><pre><code><span class="keyword">let</span> vStackView = <span class="type">UIStackView</span>(arrangedSubviews: movieLabel, quoteLabel, authorLabel)
vStackView.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>

vStackView.<span class="call">setCustomSpacing</span>(<span class="number">10</span>, after: quoteLabel)
</code></pre><br /><p>So regardless of your preference for constructing your stackviews, using <code>UIStackView(arrangedSubviews:)</code> or <code>.addArrangedSubview()</code> you can have your custom spacing!</p><p>Thanks to Sarun who wrote about this, and to Dave for featuring it in his newsletter.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Display-alerts-sheets-and-actionsheets-in-swiftui</guid><title>Alerts, Sheets, and ActionSheets in SwiftUI</title><description>How to show multiple Alerts, Sheets or ActionSheets in SwiftUI</description><link>https://andrewmarmion.com/posts/Display-alerts-sheets-and-actionsheets-in-swiftui</link><pubDate>Wed, 11 Nov 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>This post is a re-write of an <a href="https://stackoverflow.com/a/58738292/5508175">answer</a> I gave on StackOverflow.</p><hr><br /><p>To display an alert, sheet, or actionsheet in SwiftUI all follow a similar process.</p><h2>A single Alert</h2><p>Here is a simple example showing a simple single button Alert.</p><pre><code><span class="keyword">struct</span> ContentView:<span class="type">View</span> {

    <span class="keyword">@State private var</span> showAlert: <span class="type">Bool</span> = <span class="keyword">false

    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span>(action: {
            <span class="keyword">self</span>.<span class="property">showAlert</span> = <span class="keyword">true</span>

        }, label: {
            <span class="type">Text</span>(<span class="string">"Show alert"</span>)
        })
        .<span class="call">alert</span>(isPresented: $showAlert)  {
            <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Alert"</span>),
                  message: <span class="type">Text</span>(<span class="string">"You have shown an alert"</span>),
                  dismissButton: .<span class="call">default</span>(<span class="type">Text</span>(<span class="string">"OK"</span>)))
        }
    }
}

</code></pre><br /><p>To show an Alert we need a variable, <code>showAlert</code>, to track whether the Alert is showing or not. However, as we are mutating the value of this variable it will need to be an <code>@State</code> variable. We give this an initial value of <code>false</code>.</p><p>We then have a Button whose action sets the value of <code>showAlert</code> to true.</p><p>Finally we need to setup the Alert. We do this by using the <code>.alert(isPresented:content:)</code> modifier. It takes a binding of Binding&lt;Bool&gt; and a content returns an Alert.</p><h2>Two Alerts</h2><p>So what if we wanted to have two Alerts on the screen? Well it is isn't too complicated but there is a gotcha, let's start with something that we think should work but doesn't.</p><pre><code><span class="keyword">struct</span> ContentView:<span class="type">View</span> {

    <span class="keyword">@State private var</span> showAlertOne: <span class="type">Bool</span> = <span class="keyword">false
    @State private var</span> showAlertTwo: <span class="type">Bool</span> = <span class="keyword">false

    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span>(spacing: <span class="number">20</span>) {
            <span class="type">Button</span>(action: {
                <span class="keyword">self</span>.<span class="property">showAlertOne</span> = <span class="keyword">true</span>

            }, label: {
                <span class="type">Text</span>(<span class="string">"Show first alert"</span>)
            })

            <span class="type">Button</span>(action: {
                <span class="keyword">self</span>.<span class="property">showAlertTwo</span> = <span class="keyword">true</span>

            }, label: {
                <span class="type">Text</span>(<span class="string">"Show second alert"</span>)
            })
        }
        .<span class="call">alert</span>(isPresented: $showAlertOne) {
            <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Alert One"</span>),
                  message: <span class="type">Text</span>(<span class="string">"You have shown Alert One"</span>),
                  dismissButton: .<span class="call">default</span>(<span class="type">Text</span>(<span class="string">"OK"</span>)))
        }
        .<span class="call">alert</span>(isPresented: $showAlertTwo) {
            <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Alert Two"</span>),
                  message: <span class="type">Text</span>(<span class="string">"You have shown Alert Two"</span>),
                  dismissButton: .<span class="call">default</span>(<span class="type">Text</span>(<span class="string">"OK"</span>)))
        }

    }
}

</code></pre><p>So we setup our ContentView in a similar way as before, we add an additional <code>@State</code> variable to control the second Alert. We add the <code>.alert(isPresented:content:)</code> modifier. And we should be good to go.</p><p>Running this code, produces an unexpected result. The first Alert is never presented. We can only present the second. So what is causing this?</p><p>Due to the way SwiftUI constructs its views, we can only have one Alert on an individual view. We can get around this issue by changing how we add the <code>.alert(isPresenting:content:)</code> modifiers. As long as we don't <strong>chain</strong> the Alerts they should function as expected.</p><pre><code><span class="keyword">struct</span> ContentView:<span class="type">View</span> {

    <span class="keyword">@State private var</span> showAlertOne: <span class="type">Bool</span> = <span class="keyword">false
    @State private var</span> showAlertTwo: <span class="type">Bool</span> = <span class="keyword">false

    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span>(spacing: <span class="number">20</span>) {
            <span class="type">Button</span>(action: {
                <span class="keyword">self</span>.<span class="property">showAlertOne</span> = <span class="keyword">true</span>

            }, label: {
                <span class="type">Text</span>(<span class="string">"Show first alert"</span>)
            })
            .<span class="call">alert</span>(isPresented: $showAlertOne) {
                <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Alert One"</span>),
                      message: <span class="type">Text</span>(<span class="string">"You have shown Alert One"</span>),
                      dismissButton: .<span class="call">default</span>(<span class="type">Text</span>(<span class="string">"OK"</span>)))
            }

            <span class="type">Button</span>(action: {
                <span class="keyword">self</span>.<span class="property">showAlertTwo</span> = <span class="keyword">true</span>

            }, label: {
                <span class="type">Text</span>(<span class="string">"Show second alert"</span>)
            })
            .<span class="call">alert</span>(isPresented: $showAlertTwo) {
                <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Alert Two"</span>),
                      message: <span class="type">Text</span>(<span class="string">"You have shown Alert Two"</span>),
                      dismissButton: .<span class="call">default</span>(<span class="type">Text</span>(<span class="string">"OK"</span>)))
            }
        }
    }
}

</code></pre><p>Note we have added the <code>.alert(isPresented:content:)</code> modifiers to each button. This stops the Alerts from being chained and allows them to present as expected.</p><p>This starts to get more complicated if we add more Alerts. What if we have 6 or 7 different Alerts we could present? What if the View is so simple that we have no choice but to chain the Alerts? This isn't ideal and it would mean that our Alerts are spread all over our view (adding complexity) or we are unable to add the Alerts that we want.</p><h2>Handling multiple Alerts.</h2><p>There is actually another modifier that allows us to show and Alert <code>.alert(item:content:)</code>. This takes an item that is a Binding&lt;Identifiable&gt; and a closure that takes an Identifiable that that returns an Alert.</p><p>So how can we use this to make our Alerts? Well the first thing that we need to do is create something that conforms to Identifiable. We are going to use an enum that has an associated value and conforms to Identifiable. The <code>id</code> property, that is required to make the enum Identifiable, is a computed property that returns the rawValue of the enum (hence why we need the enum to have an associated value).</p><pre><code><span class="keyword">enum</span> Choice: <span class="type">Int</span>, <span class="type">Identifiable</span> { 
    <span class="keyword">var</span> id: <span class="type">Int</span> {
        rawValue
    }

    <span class="keyword">case</span> first, second
}

</code></pre><p>So let's look at how it all fits together.</p><pre><code><span class="keyword">struct</span> ContentView:<span class="type">View</span> {

    <span class="keyword">@State private var</span> showAlert: <span class="type">Choice</span>? <span class="comment">// init this as nil</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span>(spacing: <span class="number">20</span>) {
            <span class="type">Button</span>(action: {
                <span class="keyword">self</span>.<span class="property">showAlert</span> = .<span class="dotAccess">first</span>

            }, label: {
                <span class="type">Text</span>(<span class="string">"Show first alert"</span>)
            })

            <span class="type">Button</span>(action: {
                <span class="keyword">self</span>.<span class="property">showAlert</span> = .<span class="dotAccess">second</span>

            }, label: {
                <span class="type">Text</span>(<span class="string">"Show second alert"</span>)
            })
        }
        .<span class="call">alert</span>(item: $showAlert) { choice -&gt; <span class="type">Alert</span> <span class="keyword">in

            switch</span> choice {
                <span class="keyword">case</span> .<span class="dotAccess">first</span>:
                    <span class="keyword">return</span> <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Alert One"</span>),
                                 message: <span class="type">Text</span>(<span class="string">"You have shown Alert One"</span>),
                                 dismissButton: .<span class="call">default</span>(<span class="type">Text</span>(<span class="string">"OK"</span>)))

                <span class="keyword">case</span> .<span class="dotAccess">second</span>:
                    <span class="keyword">return</span> <span class="type">Alert</span>(title: <span class="type">Text</span>(<span class="string">"Alert Two"</span>),
                                 message: <span class="type">Text</span>(<span class="string">"You have shown Alert Two"</span>),
                                 dismissButton: .<span class="call">default</span>(<span class="type">Text</span>(<span class="string">"OK"</span>)))
            }
        }
    }
}

</code></pre><p>We have removed the multiple <code>@State</code> variables for each Alert and replaced them with one that uses our enum. To guarantee that we don't show an Alert we set this to nil. When our Alert is dismissed it will reset it back to nil.</p><p>We have updated the actions inside each Button. Instead of setting the values to true we set them to the enum case that relates to the Alert that we want to show.</p><p>Finally we have used the <code>.alert(item:content:)</code> modifier. We use a switch statement to select the Alert that we want to show, depending on the choice we have made.</p><p>This makes it much cleaner for showing our Alerts as they can be stored in one place and we can easily extend this to have as many Alerts as we want, just increase the number of cases that we have in our enum.</p><h2>Sheets and ActionSheets</h2><p>Sheets and ActionSheets are very similar to Alerts in how they are presented. There are four ways to present Sheets.</p><p>These two require a Bool binding:</p><pre><code>.<span class="call">sheet</span>(isPresented: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;, content: () -&gt; <span class="type">View</span>)
.<span class="call">sheet</span>(isPresented: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;, onDismiss: (() -&gt; <span class="type">Void</span>)?, content: () -&gt; <span class="type">Void</span>)

</code></pre><p>These two require an Identifiable binding:</p><pre><code>.<span class="call">sheet</span>(item: <span class="type">Binding</span>&lt;<span class="type">Identifiable</span>?&gt;, content: (<span class="type">Identifiable</span>) -&gt; <span class="type">View</span>)
.<span class="call">sheet</span>(item: <span class="type">Binding</span>&lt;<span class="type">Identifiable</span>?&gt;, onDismiss: (() -&gt; <span class="type">Void</span>)?, content: (<span class="type">Identifiable</span>) -&gt; <span class="type">View</span>)

</code></pre><br /><p>For ActionSheets there are two ways, like Alerts.</p><p>With the Bool binding:</p><pre><code>.<span class="call">actionSheet</span>(isPresented: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;, content: () -&gt; <span class="type">ActionSheet</span>)

</code></pre><p>With the Identifiable binding:</p><pre><code>.<span class="call">actionSheet</span>(item: <span class="type">Binding</span>&lt;<span class="type">Identifiable</span>?&gt;, content: (<span class="type">Identifiable</span>) -&gt; <span class="type">ActionSheet</span>)

</code></pre><h2>Which binding should I use?</h2><h2>Binding&lt;Bool&gt;</h2><p>If you only need to show one type of Alert, Sheet or ActionSheet then use the Bool binding, it saves you having to write some extra lines of code.</p><h2>Binding&lt;Identifiable&gt;</h2><p>If you many different types of Alerts, Sheets or ActionSheets to show then choose the Identifiable binding as it makes it much easier to manage.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Updating-a-widget-using-AppStorage</guid><title>Updating a Widget using AppStorage</title><description>How to update a SwiftUI Widget when AppStorage updates</description><link>https://andrewmarmion.com/posts/Updating-a-widget-using-AppStorage</link><pubDate>Sat, 7 Nov 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>One of the new features in iOS 14 is Widgets. These are great and much has been said about them. But one problem that people always seem to struggle with is how to get data from your App into your Widget.</p><p>Well the simplest answer is to use an AppGroup.</p><p>An AppGroup allows the sharing of data between all apps and extensions that have the capability of that AppGroup.</p><p>It is really easy to set up an AppGroup. In each target that you want to share data you add the AppGroup capability. Once this has resolved it should have a name like: <strong>"group.com.my.app.identifier"</strong></p><p>So when dealing with Widgets, you will need to set up an AppGroup in both the App's and the Widget Extension's target, using the same identifier. This now means that they can share the same file system, user defaults, etc.</p><h2>AppStorage</h2><p>AppStorage is just a property wrapper for UserDefaults. The following comes from my <a href="https://stackoverflow.com/a/62602643/5508175">answer</a> about AppStorage on Stackoverflow.<br><br>Looking at the <a href="https://developer.apple.com/documentation/swiftui/appstorage">documentation</a> for <code>@AppStorage</code> the only values that you can currently store using this property wrapper are:</p><ul><li><code>Int</code></li><li><code>Double</code></li><li><code>String</code></li><li><code>Bool</code></li><li><code>URL</code></li><li><code>Data</code></li></ul><br /><p>And their optional counterparts. You can also store values that conform to <code>RawRepresentable</code>, like enums that conform to <code>Int</code> or <code>String</code>.</p><p>If you want to store a dictionary using this method then you would have to convert it to data and store it that way.</p><pre><code><span class="keyword">@AppStorage</span>(<span class="string">"ratings"</span>)
<span class="keyword">var</span> ratings: <span class="type">Data</span> = <span class="type">Data</span>() <span class="comment">// we need to initialize it with something</span>

</code></pre><br /><p>Then we can save to it using</p><pre><code><span class="keyword">let</span> data = [<span class="string">"Hello"</span>: <span class="number">5.0</span>]
<span class="keyword">guard let</span> ratings = <span class="keyword">try</span>? <span class="type">JSONEncoder</span>().<span class="call">encode</span>(data) <span class="keyword">else</span> { <span class="keyword">return</span> }
<span class="keyword">self</span>.<span class="property">ratings</span> = ratings

</code></pre><br /><p>And if we want to retrieve it we can do the following:</p><pre><code><span class="keyword">guard let</span> decodedRatings = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">String</span>:<span class="type">Double</span>].<span class="keyword">self</span>, from: ratings) <span class="keyword">else</span> { <span class="keyword">return</span> }
<span class="call">print</span>(decodedRatings)

</code></pre><h2>Setting the background color of a Widget using AppStorage</h2><p>So this blog post comes off the back off an <a href="https://stackoverflow.com/a/64725875/5508175">answer</a> on Stackoverflow that I gave today.</p><p>The question poster wanted to update the user of the app to be able to pick a colour for the background of the widget. I gave them the following working example:</p><br /><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> WidgetKit

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {

    <span class="keyword">@AppStorage</span>(<span class="string">"color"</span>, store: <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.com.my.app.identifier"</span>))
    <span class="keyword">var</span> colorData: <span class="type">Data</span> = <span class="type">Data</span>()

    <span class="keyword">@State private var</span> bgColor: <span class="type">CGColor</span> = <span class="type">UIColor</span>.<span class="property">systemBackground</span>.<span class="property">cgColor</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {

        <span class="type">ColorPicker</span>(<span class="string">"Color"</span>, selection: <span class="type">Binding</span>(get: {
            bgColor
        }, set: { newValue <span class="keyword">in</span>
            <span class="call">save</span>(color: <span class="type">UIColor</span>(cgColor: newValue))
            bgColor = newValue
        }))
    }

    <span class="keyword">func</span> save(color: <span class="type">UIColor</span>) {
        <span class="keyword">do</span> {
            colorData = <span class="keyword">try</span> <span class="type">NSKeyedArchiver</span>.<span class="call">archivedData</span>(withRootObject: color, requiringSecureCoding: <span class="keyword">false</span>)
            <span class="type">WidgetCenter</span>.<span class="property">shared</span>.<span class="call">reloadAllTimelines</span>()
        } <span class="keyword">catch let</span> error {
            <span class="call">print</span>(<span class="string">"error color key data not saved</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>)
        }
    }
}

</code></pre><br /><p>As we will be storing the picked color as Data we need to set up our <code>@AppStorage</code> property to accept Data, and as we are planning on sharing the Data with an extension, making sure to use <code>UserDefaults(suitname:)</code>.</p><p>Inside the ContentView we set up a <code>ColorPicker</code>. The <code>ColorPicker</code> has the a few initializers, here are two:</p><pre><code><span class="type">ColorPicker</span>(<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, selection: <span class="type">Binding</span>&lt;<span class="type">CGColor</span>&gt;)
<span class="type">ColorPicker</span>(<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, selection: <span class="type">Binding</span>&lt;<span class="type">Color</span>&gt;)

</code></pre><p>The main difference between the initializers is the <code>Binding</code> that they use. It can either be a <code>Binding&lt;Color&gt;</code> or a <code>Binding&lt;CGColor&gt;</code>.</p><p><code>Color</code> is a SwiftUI struct that represents a color, it is a bit more complicated to use but we can create a <code>Color</code> from a <code>UIColor</code> and we can create a <code>UIColor</code> from a <code>CGColor</code>. <code>CGColor</code> doesn't conform to <code>NSCoding</code> or <code>NSObject</code> whereas <code>UIColor</code> does. This means that we will use a <code>ColorPicker</code> with <code>Binding&lt;CGColor&gt;</code> so that we can easily convert it into a <code>UIColor</code> and then in to <code>Data</code> to be stored.</p><p>We use a custom binding with <code>ColorPicker</code>, this is so that we have easy access to the getter and setter of the binding. Doing this means that we can call <code>save(color:)</code> each time the color is updated by the user.</p><p>We can use <code>NSKeyedArchiver</code> to convert the <code>UIColor</code> into data and if that is successful we can update our <code>@AppStorage</code> object (which will save the data into UserDefaults). If it is successful at converting the color into <code>Data</code> we will want to call <code>WidgetCenter.shared.reloadAllTimelines()</code> so that the WidgetCenter knows that changes have occurred and that it should update the timelines.</p><p>Now that we have the ContentView setup, let's construct the Widget.</p><pre><code><span class="keyword">import</span> WidgetKit
<span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> Provider: <span class="type">TimelineProvider</span> {

    <span class="keyword">@AppStorage</span>(<span class="string">"color"</span>, store: <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.com.my.app.identifier"</span>))
    <span class="keyword">var</span> colorData: <span class="type">Data</span> = <span class="type">Data</span>()

    <span class="keyword">func</span> placeholder(in context: <span class="type">Context</span>) -&gt; <span class="type">SimpleEntry</span> {
        <span class="type">SimpleEntry</span>(color: color)
    }

    <span class="keyword">func</span> getSnapshot(in context: <span class="type">Context</span>, completion: <span class="keyword">@escaping</span> (<span class="type">SimpleEntry</span>) -&gt; ()) {
        <span class="keyword">let</span> entry = <span class="type">SimpleEntry</span>(color: color)
        <span class="call">completion</span>(entry)
    }

    <span class="keyword">func</span> getTimeline(in context: <span class="type">Context</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Timeline</span>&lt;<span class="type">Entry</span>&gt;) -&gt; ()) {
        <span class="keyword">let</span> entry = <span class="type">SimpleEntry</span>(color: color)
        <span class="keyword">let</span> timeline = <span class="type">Timeline</span>(entries: [entry], policy: .<span class="dotAccess">atEnd</span>)
        <span class="call">completion</span>(timeline)
    }

    <span class="keyword">var</span> color: <span class="type">UIColor</span> {

        <span class="keyword">var</span> color: <span class="type">UIColor</span>?

        <span class="keyword">do</span> {
            color = <span class="keyword">try</span> <span class="type">NSKeyedUnarchiver</span>.<span class="call">unarchivedObject</span>(ofClass: <span class="type">UIColor</span>.<span class="keyword">self</span>, from: colorData)
        } <span class="keyword">catch let</span> error {
            <span class="call">print</span>(<span class="string">"color error</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>)

        }
        <span class="keyword">return</span> color ?? .<span class="dotAccess">systemBlue</span>
    }
}

<span class="keyword">struct</span> SimpleEntry: <span class="type">TimelineEntry</span> {
    <span class="keyword">let</span> date: <span class="type">Date</span> = <span class="type">Date</span>()
    <span class="keyword">let</span> color: <span class="type">UIColor</span>
}

<span class="keyword">struct</span> MyWidgetEntryView : <span class="type">View</span> {
    <span class="keyword">var</span> entry: <span class="type">Provider</span>.<span class="type">Entry</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ZStack</span> {
            <span class="type">Color</span>(entry.<span class="property">color</span>)
            <span class="type">Text</span>(entry.<span class="property">date</span>, style: .<span class="dotAccess">time</span>)
        }
    }
}

<span class="keyword">@main
struct</span> MyWidget: <span class="type">Widget</span> {
    <span class="keyword">let</span> kind: <span class="type">String</span> = <span class="string">"MyWidget"</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">WidgetConfiguration</span> {
        <span class="type">StaticConfiguration</span>(kind: kind, provider: <span class="type">Provider</span>()) { entry <span class="keyword">in</span>
            <span class="type">MyWidgetEntryView</span>(entry: entry)
        }
        .<span class="call">configurationDisplayName</span>(<span class="string">"My Widget"</span>)
        .<span class="call">description</span>(<span class="string">"This is an example widget."</span>)
    }
}

</code></pre><br /><p>When constructing entries for the widget's timeline we need to pass everything the widget needs at that point. Trying to access resources inside a Widger is not going to work as Widgets are static. This means our <code>@AppStorage</code> has to go inside our <code>Provider</code> struct and not inside <code>MyWidgetEntryView</code> or <code>MyWidget</code> structs. We setup the <code>@AppStorage</code> the same way that we did in the <code>ContentView</code>, using <code>UserDefaults(suitname:)</code> with our <code>AppGroup</code> identifier.</p><p>For ease of access, I created a computed property in the <code>Provider</code> called <code>color</code> that returns a <code>UIColor</code>. This computed property takes the data for the color from <code>@AppStorage</code> and using <code>NSKeyedArchiever</code> unarchives the object as a <code>UIColor</code> we can then use the <code>color</code> property to update our entries. As the color that comes back from the data is optional we need to use <strong>nil-coalescing</strong> to provide a default value, in this cause I have chosen to use <code>.systemBlue</code>.</p><p><code>getTimeline(in:completion:)</code> doesn't require multiple entries as we are only going to show one entry with the user's chosen color so I simplified the logic there.</p><p>I've also updated the SimpleEntry to take a <code>UIColor</code>, and <code>MyWidgetEntryView</code> now has a <code>ZStack</code> that uses the color from the <code>SimpleEntry</code> to set the background color of the view.<br><br></p><p /><h2>An issue</h2><p>One issue with the above method is that we are updating the UserDefaults and asking the Widgets to reload everytime the user makes a minor change. Imagine a user swiping their finger across the color picker, changing colors several times a second, this would lead to too many unneeded calls to <code>save(color:)</code>. We can fix this by making a couple of changes in our <code>ContentView</code>. Let's swap out the <code>@State</code> variable for that holds the color for an <code>@StateObject</code>. This will require us to create an <code>ObservableObject</code> but the trade off is it gives us access to a Publisher for free.</p><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> Combine

<span class="keyword">class</span> ColorManager: <span class="type">ObservableObject</span> {

    <span class="keyword">@Published var</span> color: <span class="type">CGColor</span>

    <span class="keyword">init</span>() {
        <span class="keyword">var</span> color: <span class="type">UIColor</span>?

        <span class="keyword">do</span> {
            <span class="keyword">if let</span> data = <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.com.my.app.identifier"</span>)?.<span class="call">data</span>(forKey: <span class="string">"color"</span>) {
                color = <span class="keyword">try</span> <span class="type">NSKeyedUnarchiver</span>.<span class="call">unarchivedObject</span>(ofClass: <span class="type">UIColor</span>.<span class="keyword">self</span>, from: data)
            }
        } <span class="keyword">catch let</span> error {
            <span class="call">print</span>(<span class="string">"color error</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>)

        }
        <span class="keyword">self</span>.<span class="property">color</span> = color?.<span class="property">cgColor</span> ?? <span class="type">UIColor</span>.<span class="property">systemBlue</span>.<span class="property">cgColor</span>
    }
}

</code></pre><br /><br /><p>We have created a ColorManager that has a published property of color (which is our <code>CGColor</code>). We have also added some functionality to the initializer, we are now getting the value of our color from UserDefaults so that we can set it, that way our <code>ColorPicker</code> will show which color the user had picked,</p><p>There are a couple of changes that we need to make to the <code>ContentView</code></p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {

    <span class="keyword">@AppStorage</span>(<span class="string">"color"</span>, store: <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.com.my.app.identifier"</span>))
    <span class="keyword">var</span> colorData: <span class="type">Data</span> = <span class="type">Data</span>()

    <span class="keyword">@StateObject var</span> colorManager = <span class="type">ColorManager</span>() <span class="comment">// Use the ObservableObject we just created above</span>


    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">ColorPicker</span>(<span class="string">"Color"</span>, selection: $colorManager.<span class="property">color</span>) <span class="comment">// Replace the custom binding that we had</span>
        }
        <span class="comment">// Use an onReceive to capture and manage the changes</span>
        .<span class="call">onReceive</span>(colorManager.<span class="property">$color</span>.<span class="call">debounce</span>(for: <span class="number">0.5</span>, scheduler: <span class="type">RunLoop</span>.<span class="property">main</span>)) { color <span class="keyword">in</span>
            <span class="call">save</span>(color: <span class="type">UIColor</span>(cgColor: color))
        }
    }

    <span class="keyword">func</span> save(color: <span class="type">UIColor</span>) {
        <span class="keyword">do</span> {
            colorData = <span class="keyword">try</span> <span class="type">NSKeyedArchiver</span>.<span class="call">archivedData</span>(withRootObject: color, requiringSecureCoding: <span class="keyword">false</span>)
            <span class="type">WidgetCenter</span>.<span class="property">shared</span>.<span class="call">reloadAllTimelines</span>()
        } <span class="keyword">catch let</span> error {
            <span class="call">print</span>(<span class="string">"error color key data not saved</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>)
        }
    }
}

</code></pre><br /><br /><p>There are only a few changes that we have made. Firstly, we have swapped the <code>@State</code> for an <code>@StateObject</code> this is so that we can use an instance of the <code>ColorManager</code> that we just created. Secondly, we have replaced the custom binding that we created to track the changes of the color with the <code>@Published</code> color property in the <code>ColorManager</code>. And Finally, we have added an <code>.onReceive</code> which is using the publisher from our new color property. I haved a <code>.debounce</code> to the publisher. This basically limits the rate at which the user can change the color, it means that we won't be calling <code>save(color:)</code> needlessly and also we won't be reloading the widgets.</p><p>We could also add a <code>.dropFirst()</code> before the <code>.debounce</code> this would stop an erroneous save that occurs when the view is first constructed.</p><h2>In summary</h2><p>Even though it is quite a simple example there is a lot going:</p><ul><li>We set up an <code>AppGroup</code></li><li>We used <code>NSKeyedArchiver</code> to convert a <code>UIColor</code> to <code>Data</code> which was then stored in UserDefaults using <code>@AppStorage</code>.</li><li>We notified <code>WidgetCenter</code> that our Widgets needed reloading.</li><li>We accessed the stored color <code>Data</code> in our <code>Provider</code>.</li><li>We used a computed property to get our <code>UIColor</code> out of <code>@AppStorage</code> by using <code>NSKeyedArchiver.unarchivedObject(ofClass:from:)</code>.</li><li>We updated our <code>Entry</code> to have a color property.</li><li>We also updated <code>MyWidgetEntryView</code> to use the color property of the <code>Entry</code> it had been passed.</li><li>We then refactored our original implementation to fix too many calls to <code>save(color:)</code>.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Building-and-signing-an-iOS-app-with-Azure-DevOps</guid><title>Building and signing an iOS app using Azure DevOps</title><description>A quick start guide to building your iOS app on Azure Devops</description><link>https://andrewmarmion.com/posts/Building-and-signing-an-iOS-app-with-Azure-DevOps</link><pubDate>Fri, 6 Nov 2020 12:00:00 +0000</pubDate><content:encoded><![CDATA[<p>Over the years I have used different CI/CD solutions: like Jenkins, Travis, Cricle CI and Bitrise (which is actually my favourite). One that I had not used before was Azue DevOps.</p><p>So I decided to give it a go.</p><p>I have a repo on my GitHub called FizzBuzz, the code for this project comes from a 2015 <a href="https://medium.com/@ynzc/getting-started-with-tdd-in-swift-2fab3e07204b">Medium article</a> by <a href="https://medium.com/@ynzc">Yvette</a> about TDD with Swift. I like using this project for testing CI/CD because it is a functioning app, it has unit tests and it has UI tests. Is it the best example of coding out there? No. But it serves me well for testing CI/CD.</p><h2>Getting Started</h2><p>It is really easy to get started with <a href="https://azure.microsoft.com/en-gb/services/devops/">Azure DevOps</a>. Just click the <strong>Start for free</strong> button.</p><p><a href="../../Images/AzureDevOps/azure-signup.png"><img src="../../Images/AzureDevOps/azure-signup.png" alt="Azure DevOps Signup" style="width:400px;" /></a></p><p>I signed up with an existing Microsoft account that I had, though I believe that you can sign in with your GitHub account and it will create an associated Microsoft account for you.</p><p>Once you are in you can create a new project and from there it is possible to add/clone a repo to it. I cloned my FizzBuzz repo and I was ready to get started.</p><h2>Creating a Pipeline</h2><p>My project doesn't have any dependencies such as CocoaPods or Carthage so I didn't need to worry about installing them. However, to create a signed build I did need to upload the <strong>p12</strong> and the <strong>provisioning profile</strong>.</p><p>Azure DevOps does have a secure area to store these. It took a bit to find where to store them but under the Pipelines section there is a Library, and inside there you can store your files in Secure Files.</p><br /><p><a href="../../Images/AzureDevOps/library.png"><img src="../../Images/AzureDevOps/library.png" alt="Where to store secure files" style="width:400px;" /></a></p><p>Once you have uploaded your files we can get started on creating our pipeline.</p><p>In the Pipeline section you should see a button for creating a new Pipeline. Clicking that takes you through a setup wizard that does the following:</p><h2>Where is the code?</h2><p>This is where your code is located. As I cloned my repo Azure I selected the first option.</p><p><a href="../../Images/AzureDevOps/where-is-your-code.png"><img src="../../Images/AzureDevOps/where-is-your-code.png" alt="Where is your code located" style="width:400px;" /></a></p><h2>Select your repo</h2><p>I only have the one repo in the project so it is fairly obvious which one to select.</p><p><a href="../../Images/AzureDevOps/select-your-repo.png"><img src="../../Images/AzureDevOps/select-your-repo.png" alt="Select your repo" style="width:400px;" /></a></p><h2>Configure</h2><p>There are three options to configure your pipeline.</p><ol><li>Xcode - this is a sample for Xcode build setup</li><li>Starter pipeline - this is a vary basic pipeline</li><li>Existing Azure Pipelines YAML file - this allows you to select an existing pipeline that you can then customize and build from.</li></ol><br /><p><a href="../../Images/AzureDevOps/configure-pipeline.png"><img src="../../Images/AzureDevOps/configure-pipeline.png" alt="Configure the pipeline" style="width:400px;" /></a></p><p>As this was my first pipeline I chose the first option.</p><h2>Review</h2><p>Once you have selected your Configure option you will be presented with a review screen.<br><br>This is the simple Xcode pipeline that it give:</p><p><a href="../../Images/AzureDevOps/review.png"><img src="../../Images/AzureDevOps/review.png" alt="Review the pipeline" style="width:400px;" /></a></p><br /><pre><code># <span class="type">Xcode</span>
# <span class="type">Build</span>, test, and archive an <span class="type">Xcode</span> workspace on macOS.
# <span class="type">Add</span> steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.<span class="property">microsoft</span>.<span class="property">com</span>/azure/devops/pipelines/languages/xcode

trigger:
- master

pool:
  vmImage: 'macos-latest'

steps:
- task: <span class="type">Xcode@5</span>
  inputs:
    actions: 'build'
    scheme: ''
    sdk: 'iphoneos'
    configuration: '<span class="type">Release</span>'
    xcWorkspacePath: '**/*.xcodeproj/project.<span class="property">xcworkspace</span>'
    xcodeVersion: '<span class="keyword">default</span>' # <span class="type">Options</span>: <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, default, specifyPath
    
</code></pre><br /><p>So at this point you can either <strong>Save and run</strong> or just <strong>Save</strong> your pipeline.</p><h2>The pipeline</h2><p>Unfortunately this sample pipeline is not enough for us to create a proper build with a signed ipa.</p><p>However we can add some additional tasks to our yaml file so that we can get a signed build.</p><pre><code># <span class="type">Xcode</span>
# <span class="type">Build</span>, test, and archive an <span class="type">Xcode</span> workspace on macOS.
# <span class="type">Add</span> steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.<span class="property">microsoft</span>.<span class="property">com</span>/azure/devops/pipelines/languages/xcode

trigger:
- master

pool:
  vmImage: 'macos-latest'

steps:
- task: <span class="type">InstallAppleCertificate@2</span>
  displayName: '<span class="type">Install Certificates</span>'
  inputs:
    certSecureFile: '<span class="type">Certificates</span>.<span class="property">p12</span>'
    certPwd: $(<span class="type">P12Password</span>)
    keychain: 'temp'
    deleteCert: <span class="keyword">true</span>  

- task: <span class="type">InstallAppleProvisioningProfile@1</span>
  displayName: '<span class="type">Install Provisioning Profiles</span>'
  inputs:
    provProfileSecureFile: '<span class="type">FizzBuzz</span>.<span class="property">mobileprovision</span>'
    removeProfile: <span class="keyword">true</span>

- task: <span class="type">Xcode@5</span>
  displayName: '<span class="type">Xcode Build</span>'
  inputs:
    actions: 'build'
    scheme: '<span class="type">FizzBuzz</span>'
    sdk: 'iphoneos'
    configuration: '<span class="type">Release</span>'
    xcWorkspacePath: '**/*.xcodeproj/project.<span class="property">xcworkspace</span>'
    xcodeVersion: '<span class="keyword">default</span>' 
    packageApp: <span class="keyword">true</span>
    signingOption: 'manual'
    signingIdentity: '$(<span class="type">APPLE_CERTIFICATE_SIGNING_IDENTITY</span>)'
    provisioningProfileUuid: '$(<span class="type">APPLE_PROV_PROFILE_UUID</span>)'

- task: <span class="type">CopyFiles@2</span>
  displayName: '<span class="type">Copy</span> files'
  inputs:
    contents: '**/*.ipa'
    targetFolder: '$(build.<span class="property">artifactStagingDirectory</span>)'
    overWrite: <span class="keyword">true</span>

- task: <span class="type">PublishBuildArtifacts@1</span>
  displayName: '<span class="type">Publish Artifacts</span>'
  inputs:
    pathtoPublish: '$(build.<span class="property">artifactStagingDirectory</span>)/output/$(sdk)/$(configuration)' 
    artifactName: 'drop' 
    publishLocation: '<span class="type">Container</span>'
    
</code></pre><br /><p>Comparing the sample yaml with our updated yaml we can see there are a few additional tasks that have been added, and we have added a few additional inputs to the</p><p>Tasks that we added:</p><ol><li>Install certificates and provisioning profiles</li><li>Build with Xcode</li><li>Copy the ipa</li><li>Publish the artifacts</li></ol><br /><h2>1. Installing Certificates and provisioning profiles</h2><p>Earlier on we uploaded our <strong>p12</strong> and our provisioning profile to the <strong>Secure Files</strong> area. This is where we access them.</p><p>So we need to make sure that the values that we enter for <strong>certSecureFile</strong> in the <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/install-apple-certificate?view=azure-devops">InstallAppleCertificate@2</a> and the <strong>provProfileSecureFile</strong> in <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/install-apple-provisioning-profile?view=azure-devops">InstallAppleProvisioningProfile@1</a> match exactly.</p><p>You'll notice that the <strong>InstallAppleCertificate@2</strong> has <strong>certPwd</strong> field. We are using a variable to store the <strong>$(P12Password)</strong> this can be added by clicking the <strong>Variable</strong> options on the right hand side of the screen, and selecting <strong>+</strong> to add the new variable. You <strong>do not</strong> want to store passwords directly in the yaml file, it is not a secure place for such things.</p><pre><code>- task: <span class="type">InstallAppleCertificate@2</span>
  displayName: '<span class="type">Install Certificates</span>'
  inputs:
    certSecureFile: '<span class="type">Certificates</span>.<span class="property">p12</span>'
    certPwd: $(<span class="type">P12Password</span>)
    keychain: 'temp'
    deleteCert: <span class="keyword">true</span>  

- task: <span class="type">InstallAppleProvisioningProfile@1</span>
  displayName: '<span class="type">Install Provisioning Profiles</span>'
  inputs:
    provProfileSecureFile: '<span class="type">FizzBuzz</span>.<span class="property">mobileprovision</span>'
    removeProfile: <span class="keyword">true</span>
    
</code></pre><h2>2. Build with Xcode</h2><p>The <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/xcode?view=azure-devops">Xcode@5</a> task builds and signs our ipa.</p><p>We've explicity set the <strong>scheme</strong> as we may have multiple schemes in our project and this keeps it cleaner and easier to work with. But we have added the following:</p><ol><li><strong>packageApp</strong></li><li><strong>signingOption</strong></li><li><strong>signingIdentity</strong></li><li><strong>provisioningProfileUuid</strong></li></ol><br /><h3>packageApp</h3><br /><p>This tells the build task whether we want to create an ipa or not.</p><h3>signingOption</h3><br /><p>What type of signing we are using. Here we are using <strong>manual</strong>.</p><h3>signingIdentity</h3><br /><p>The value <strong>APPLE_CERTIFICATE_SIGNING_IDENTITY</strong> is captured when the we import the certificate in the step above.</p><h3>provisioningProfileUuid</h3><br /><p>The value <strong>APPLE_PROV_PROFILE_UUID</strong> is captured when we import the provisioning profile in the step above.</p><pre><code>- task: <span class="type">Xcode@5</span>
  displayName: '<span class="type">Xcode Build</span>'
  inputs:
    actions: 'build'
    scheme: '<span class="type">FizzBuzz</span>'
    sdk: 'iphoneos'
    configuration: '<span class="type">Release</span>'
    xcWorkspacePath: '**/*.xcodeproj/project.<span class="property">xcworkspace</span>'
    xcodeVersion: '<span class="keyword">default</span>' 
    packageApp: <span class="keyword">true</span>
    signingOption: 'manual'
    signingIdentity: '$(<span class="type">APPLE_CERTIFICATE_SIGNING_IDENTITY</span>)'
    provisioningProfileUuid: '$(<span class="type">APPLE_PROV_PROFILE_UUID</span>)'
    
</code></pre><h2>3. Copy the ipa</h2><p><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&tabs=yaml">CopyFiles@2</a> copies our built and signed ipa to our target folder. The <strong>overWrite</strong> option just means that it will overwrite the files that we are copying if they already exist. It's not 100% important to have in such a small job as this but it may be important to turn this feature on or off depending on your set up.</p><pre><code>- task: <span class="type">CopyFiles@2</span>
  displayName: '<span class="type">Copy</span> files'
  inputs:
    contents: '**/*.ipa'
    targetFolder: '$(build.<span class="property">artifactStagingDirectory</span>)'
    overWrite: <span class="keyword">true</span>
    
</code></pre><h2>4. Publish the artifacts</h2><p>Once we have copied the files we need to publish them using <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/publish-build-artifacts?view=azure-devops">PublishBuildArtifacts@1</a></p><pre><code>- task: <span class="type">PublishBuildArtifacts@1</span>
  displayName: '<span class="type">Publish Artifacts</span>'
  inputs:
    pathtoPublish: '$(build.<span class="property">artifactStagingDirectory</span>)/output/$(sdk)/$(configuration)' 
    artifactName: 'drop' 
    publishLocation: '<span class="type">Container</span>'
    
</code></pre><h2>Let's build the app.</h2><p>Now that we have updated the pipeline yaml we can build the app.</p><p>So on your pipelines page you can run the pipeline by right clicking the 3 dots on the right hand side and selecting <strong>Run pipeline</strong>. It's that easy. FYI the dots are hidden until you hover over them with your mouse.</p><p><a href="../../Images/AzureDevOps/run-pipeline.png"><img src="../../Images/AzureDevOps/run-pipeline.png" alt="Run the pipeline" style="width:400px;" /></a></p><p>Once you select the branch you want to build from you can then watch your build in real time.</p><br /><p><a href="../../Images/AzureDevOps/build-inprogress.png"><img src="../../Images/AzureDevOps/build-inprogress.png" alt="The build in progress" style="width:400px;" /></a></p><p>Once your pipepline has completed you can review it by selecting <strong>Pipelines</strong> from the left menu and then <strong>Runs</strong> from the tab at the top.</p><p><a href="../../Images/AzureDevOps/runs.png"><img src="../../Images/AzureDevOps/runs.png" alt="Pipeline runs" style="width:400px;" /></a></p><p>Clicking on an individual run we can see more details about it. If you have published any artifacts they will be listed under the <em>Published</em> section on this page. You can click through and download that signed ipa that you have just built. 🎉</p><p><a href="../../Images/AzureDevOps/individual-run.png"><img src="../../Images/AzureDevOps/individual-run.png" alt="Pipeline runs" style="width:400px;" /></a></p><h2>Where next?</h2><p>There are lots that can be done on Azure DevOps and I have just scratched the surface. One thing I would like to look into is deploying the app to App Center, so that it would allow for easy distribution of the app. Another would be capturing the dsyms that have been created and passing them to Apple or Firebase Crashlytics.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Adding-a-CNAME-to-Publish</guid><title>Adding a CNAME to Publish</title><description>How to automatically add a CNAME file when you Publish your blog.</description><link>https://andrewmarmion.com/posts/Adding-a-CNAME-to-Publish</link><pubDate>Thu, 29 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>This blog is currently hosted on Github pages. The actual url is <a href="https://andrewmarmion.github.io">andrewmarmion.github.io</a>, however it is possible to use a custom domain, so the blog now uses the url <a href="https://andrewmarmion.com">andrewmarmion.com</a>, which the former automatically redirects to.</p><p>However, although Publish has the ability to publish straight to Github pages it caused me one infuriating problem. Everytime I published, my custom domain would be removed and I would have to re-add it.</p><p>I discovered that this is because the CNAME file added by Github is removed during <strong>publish deploy</strong>, and after some searching I found that there is a package called <a href="https://github.com/SwiftyGuerrero/CNAMEPublishPlugin">CNAMEPublishPlugin</a> that was able to solve my woes.<br><br>It is really easy to install and use. Add the package to your dependencies in your Package.swift</p><pre><code>dependencies: [
   ...
    .<span class="call">package</span>(name: <span class="string">"CNAMEPublishPlugin"</span>, url: <span class="string">"https://github.com/SwiftyGuerrero/CNAMEPublishPlugin"</span>, from: <span class="string">"0.1.0"</span>)
],

targets: [
    .<span class="call">target</span>(
        name: <span class="string">"MyWebsite"</span>,
        dependencies: [
            ...
            <span class="string">"CNAMEPublishPlugin"</span>
        ]
    )
]

</code></pre><br /><p>Then in your <strong>main.swift</strong> install the plugin.</p><pre><code><span class="keyword">import</span> CNAMEPublishPlugin

<span class="keyword">try</span> <span class="type">MyWebsite</span>()
    .<span class="call">publish</span>(withTheme: .<span class="dotAccess">myTheme</span>,
             plugins: [
                .<span class="call">generateCNAME</span>(with: <span class="string">"andrewmarmion.com"</span>)
             ])
</code></pre><br /><p>Now everytime you build your website a CNAME file will be generated, and will be deployed to your Github page repo.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Find-port-and-kill</guid><title>Find a port and kill</title><description>How to find which process using a specific port and stop it.</description><link>https://andrewmarmion.com/posts/Find-port-and-kill</link><pubDate>Wed, 28 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>Sometimes when running a local webservice, as a Vapor server or a Python HTML server, things don't always close as you expect. This can leave you stuck when you try to use the service again, finding that the port your service uses is still in use.</p><p>On a Mac you can find which process is currently using your port by running the following command in Terminal.</p><pre><code>sudo lsof -i tcp:<span class="number">8000</span>
</code></pre><br /><p>This will give you output similar to the following</p><pre><code><span class="type">COMMAND   PID          USER   FD   TYPE             DEVICE SIZE</span>/<span class="type">OFF NODE NAME
Python</span>  <span class="number">77963</span> andrewmarmion    3u  <span class="type">IPv4</span> 0xb98da080c366aff7      0t0  <span class="type">TCP</span> *:irdmi (<span class="type">LISTEN</span>)

</code></pre><br /><p>If you want to stop the process that is running you can use the following command:</p><pre><code>kill -<span class="number">15 77963</span> <span class="comment">// kill -15 &lt;PID&gt;</span>
</code></pre><br /><p>Obviously substituting in your PID.</p><p>You can use <strong>-9</strong> instead of <strong>-15</strong>. However using <strong>-9</strong> can leave unwanted artifacts as it does not allow the process that you are killing a chance to end itself, this is because <strong>kill -9</strong> is short for <strong>SIGKILL</strong>. Whereas <strong>kill -15</strong> is short for <strong>SIGTERM</strong> which gives the process a chance to end itself. If <strong>-15</strong> doesn't work then of course use <strong>-9</strong>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Instantiating-a-UIViewController-from-a-storyboard</guid><title>Instantiating a UIViewController from a storyboard</title><description>How to instantiate a UIViewController from a storyboard</description><link>https://andrewmarmion.com/posts/Instantiating-a-UIViewController-from-a-storyboard</link><pubDate>Tue, 27 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>One thing that I do frequently when testing code is to load a UIViewController that is contained in a storyboard.</p><p>To make it easier to do, rather than having to write lots of boiler plate code over and over again, I add the following extension to my project.</p><pre><code><span class="keyword">extension</span> <span class="type">UIViewController</span> {
    <span class="comment">/// Instantiates a view controller with an indentifier matching the class name
    /// - Returns: A UIViewController of the specific class</span>
    <span class="keyword">static func</span> instantiate(name: <span class="type">String</span> = <span class="string">"Main"</span>, bundle: <span class="type">Bundle</span>? = <span class="type">Bundle</span>.<span class="property">main</span>) -&gt; <span class="type">Self</span> {
        <span class="keyword">let</span> storyboard = <span class="type">UIStoryboard</span>(name: name, bundle: bundle)
        <span class="keyword">return</span> storyboard.<span class="call">instantiateViewController</span>(identifier: <span class="type">String</span>(describing: <span class="type">Self</span>.<span class="keyword">self</span>)) <span class="keyword">as</span>! <span class="type">Self</span>
    }
}

</code></pre><br /><br /><p>This allows you to easily instantiate a view controller, with one line of code.</p><pre><code><span class="keyword">let</span> viewController: <span class="type">MyNewViewController</span> = <span class="type">MyNewViewController</span>.<span class="call">instantiate</span>()
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Adding-custom-fonts</guid><title>Adding custom fonts</title><description>How to add a custom font to your iOS project</description><link>https://andrewmarmion.com/posts/Adding-custom-fonts</link><pubDate>Mon, 26 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>One thing that you will regularly have to do as an iOS developer is add a custom font to your project. This is not a difficult task but there are several steps that can cause you slip up.</p><p>Here are the steps to make sure that a font is correctly added to your project.</p><ol><li>Add the file to your project.</li><li>Add the filename to your Info.plist.</li><li>Check the actual name of the font.</li><li>Use the font.</li></ol><h2>1. Add the file to your project.</h2><p>This is the easy part. Just drag and drop your font into your project. Make sure that you tick <strong>Copy items if needed</strong> and make sure it is added to the target by checking the box in <strong>Add to targets</strong>.</p><br /><br /><p><a href="../../Images/AddingCustomFonts/copyitems.png"><img src="../../Images/AddingCustomFonts/copyitems.png" alt="Copy items if needed" style="width:400px;" /></a></p><br /><br /><p>Once you have copied it into your project you should have something like this:</p><br /><p><a href="../../Images/AddingCustomFonts/fontInProject.png"><img src="../../Images/AddingCustomFonts/fontInProject.png" alt="Font copied into project" style="width:300px;" /></a></p><br /><br /><p>You will also want to check that the font is being copied during the Build Phase (this step isn't always necessary but it is a good idea to check).</p><p><a href="../../Images/AddingCustomFonts/copiedInBuildPhase.png"><img src="../../Images/AddingCustomFonts/copiedInBuildPhase.png" alt="Font copied in build phase" style="width:400px;" /></a></p><br /><h2>2. Add the filename to your Info.plist</h2><p>This is fairly straight forward. Add the property <strong>Fonts provided by application</strong>. This is an array of strings. You then add the filename of the font, including its extension into the Info.plist.</p><p>You should have something that looks like this:</p><br /><p><a href="../../Images/AddingCustomFonts/infoplist.png"><img src="../../Images/AddingCustomFonts/infoplist.png" alt="Font in info.plist" style="width:400px;" /></a></p><br /><p>If you prefer to edit the plist in code you can add the following, obviously using the filename of your font.</p><pre><code>&lt;key&gt;<span class="type">UIAppFonts</span>&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;<span class="type">HelveticaNowDisplay</span>-<span class="type">Bold</span>.<span class="property">ttf</span>&lt;/string&gt;
&lt;/array&gt;
</code></pre><br /><br /><h2>3 Check the actual name of the font.</h2><p>One thing that can be confusing is that the font name and the filename can be different. This means that if you try to use the filename and it doesn't match the font's name, nothing will show.</p><p>The easiest way to check the font name is to add the following code to your project.</p><br /><pre><code><span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
    <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
    <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
    <span class="keyword">for</span> name <span class="keyword">in</span> names {
        <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
    }
}
</code></pre><br /><br /><p>In a UIKit project you could add this in the AppDelegate in the <code>didFinishLaunchingWithOptions</code> before the <code>return true</code>, or you could add it in a UIViewController in the <code>viewDidLoad</code>.</p><br /><pre><code><span class="keyword">func</span> application(<span class="keyword">_</span> application: <span class="type">UIApplication</span>, 
                 didFinishLaunchingWithOptions launchOptions: [<span class="type">UIApplication</span>.<span class="type">LaunchOptionsKey</span> : <span class="type">Any</span>]? = <span class="keyword">nil</span>) -&gt; <span class="type">Bool</span> {

    <span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
        <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
        <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
        <span class="keyword">for</span> name <span class="keyword">in</span> names {
            <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
        }
    }

    <span class="keyword">return true</span>
}

</code></pre><br /><p>In a SwiftUI project the easiest way is to just add the code in an <code>.onAppear</code> code block like this:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Show me the fonts!"</span>)
            .<span class="call">onAppear</span> {
                <span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
                    <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
                    <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
                    <span class="keyword">for</span> name <span class="keyword">in</span> names {
                        <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
                    }
                }
            }
    }
}
</code></pre><br /><p>Once you run the code you should see something like this in the console:</p><pre><code><span class="type">Family</span>: <span class="type">Helvetica</span>
-&gt; <span class="type">Helvetica</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Oblique</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Light</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">LightOblique</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Bold</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">BoldOblique
Family</span>: <span class="type">Helvetica Neue</span>
-&gt; <span class="type">HelveticaNeue</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Italic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">UltraLight</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">UltraLightItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Thin</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">ThinItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Light</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">LightItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Medium</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">MediumItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Bold</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">BoldItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">CondensedBold</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">CondensedBlack
Family</span>: <span class="type">Helvetica Now Display</span>
-&gt; <span class="type">HelveticaNowDisplay</span>-<span class="type">Bold</span>         <span class="comment">// &lt;- this is the font name we were looking for</span>
<span class="type">Family</span>: <span class="type">Hiragino Maru Gothic ProN</span>
-&gt; <span class="type">HiraMaruProN</span>-<span class="type">W4</span>
</code></pre><br /><p>Notice in my case the font name and the filename match. This is a happy coincidence. Once you have found the name of your font then you should remove the code that you just added.</p><h2>4 . Use the font</h2><p>Now that you have the font name you can use it.</p><br /><h3>Using the font in UIKit</h3><br /><pre><code><span class="keyword">class</span> ViewController: <span class="type">UIViewController</span> {

    <span class="keyword">override func</span> viewDidLoad() {
        <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()

        <span class="keyword">let</span> label = <span class="type">UILabel</span>(frame: .<span class="dotAccess">zero</span>)
        label.<span class="property">text</span> = <span class="string">" HelveticaNowDisplay-Bold"</span>
        label.<span class="property">font</span> = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNowDisplay-Bold"</span>, size: <span class="number">16</span>)

        <span class="keyword">let</span> stack = <span class="type">UIStackView</span>(frame: .<span class="dotAccess">zero</span>)
        stack.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>
        stack.<span class="property">alignment</span> = .<span class="dotAccess">center</span>
        stack.<span class="property">translatesAutoresizingMaskIntoConstraints</span> = <span class="keyword">false</span>

        stack.<span class="call">addArrangedSubview</span>(label)

        view.<span class="call">addSubview</span>(stack)

        <span class="type">NSLayoutConstraint</span>.<span class="call">activate</span>([
            stack.<span class="property">centerYAnchor</span>.<span class="call">constraint</span>(equalTo: view.<span class="property">centerYAnchor</span>),
            stack.<span class="property">centerXAnchor</span>.<span class="call">constraint</span>(equalTo: view.<span class="property">centerXAnchor</span>)
        ])
    }
}
</code></pre><br /><br /><h3>Using the font in SwiftUI</h3><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
            <span class="type">Text</span>(<span class="string">"Hello HelveticaNowDisplay-Bold"</span>)
                .<span class="call">font</span>(<span class="type">Font</span>.<span class="call">custom</span>(<span class="string">"HelveticaNowDisplay-Bold"</span>, size: <span class="number">16</span>))
    }
}
</code></pre><br /><br /><p>Either way you should get the following:</p><br /><p><a href="../../Images/AddingCustomFonts/fontInSimulator.png"><img src="../../Images/AddingCustomFonts/fontInSimulator.png" alt="font shown in simulator" style="width:200px;" /></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/100-days-of-stackoverflow</guid><title>100 Days of StackOverflow</title><description>What I learnt from answering questions on Stackoverflow for 100 continuous days.</description><link>https://andrewmarmion.com/posts/100-days-of-stackoverflow</link><pubDate>Sun, 25 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<p>Back in December 2018 I decided to try and complete 100 days of answering questions on <a href="https://www.stackoverflow.com">Stack Overflow</a>. This resulted in me writing a blog post for the company that I was working for at the time. I have since moved on from that company but I still wanted to share the knowledge of what I had gained from the experience. I check in on StackOverflow most days; I answer some questions and I comment on others. Here is the article that I wrote in March 2019.</p><p>As developers it doesn’t take long before you discover <a href="https://www.stackoverflow.com">StackOverflow</a>. A quick search on Google for an error message usually has links to it in the top results.</p><p>Stack Overflow, for those that don’t know what it is, is a website that allows people to post questions on coding problems they are having. In fact, there exists the Stack Exchange, which is a network of 173 Q&amp;A communities, including Stack Overflow. These communities range across a broad range of topics from photography to amateur radio. There is probably a community out there for everyone.</p><p>What makes Stack Overflow so special is that it gathers professionals, students and dabblers all in one place. Anyone can sign up and post or answer a question. This is obviously a double-edged sword as not all questions or answers are created equal. Each user on the website can earn “reputation” as questions and answers can be upvoted and downvoted by the other users of the site. So posting a well-written question or answer can lead to an increase in your reputation and a loss in reputation can occur by posting poorly thought out questions or answers.</p><p>Although I have used Stack Overflow for many years I haven’t really taken full advantage of it. I have been a lurker. I had searched for answers on Stack Overflow but I hadn’t posted my own question or answered anyone else’s. I thought that it was about time that should change. It all happened rather innocuously.</p><p>I had been working on integrating gray box end-to-end testing into an app that I was building when I stumbled upon a question that I could answer. So I took the plunge, researched the topic a little further, and then answered the question. Although my answer wasn’t marked as the “accepted” answer, no other answers were given. I thought that I should try and answer another question or two. I did and was rewarded by having my answer accepted and upvoted (several times). I was hooked… well, not quite!</p><p>Due to work commitments and life just getting in the way, I didn’t really answer any questions for a few months. My reputation sat at around 100 from the questions that I had answered. However, I decided to turn that around and actively give back to the community. So here is what I have learned from answering 200+ questions and completing 100 days of trying to answer at least one question a day.</p><h2>Not all questions deserve an answer</h2><p>Some of the worst questions that I have seen take the following format:</p><p>I get this error. <code>&lt;Error pasted in an unformatted state&gt;</code></p><p>These types of questions aren’t going to illicit a great response from the community. It takes time to write a good question. To make sure that you have given enough information to would-be question responders is not an easy task. I could write for hours on how not to write your question, but here are a few tips for writing better questions:</p><ol><li>First, search and see if you can find a question that is similar to yours. If you find one, then only post another if the answer provided doesn’t fully help you. It is also a good idea to include a link to that original question detailing why yours is different and explain why the answer provided doesn’t answer your query.</li></ol><ol start="2"><li>Make sure your title is related to your question. Good titles mean that more people will look at your question. More people looking, means more people answering.</li></ol><ol start="3"><li>Include the minimum amount of code that is required to replicate the problem that you are having. Links to off-site places like GitHub repos or snacks on Expo are not a good idea as those links could expire, making your question have less meaning in the future.</li></ol><ol start="4"><li>Copy and paste your code/error into the question. Do not post images of your code/error. It makes it hard for those trying to help you. They may want to try out your code but cannot do so easily.</li></ol><ol start="5"><li>Make sure what you are pasting into your question is formatted nicely. The question box has editing tools that can allow you to format your code. Code that is easy to read is easier to answer.</li></ol><ol start="6"><li>List what you have tried. Don’t assume that the possible question answerer has thought of everything you have. Detail it, so that people don’t waste their time writing up an answer when you have already discounted that.</li></ol><br /><p>For more information about creating a Minimal, Complete and Verifiable example check out this post in <a href="https://stackoverflow.com/help/minimal-reproducible-example">Stack Overflow’s help center</a>.</p><h2>Not all answers should be written</h2><p>From what I have seen many people rush to post an answer in the hope of getting a boost to their reputation. They will post a small snippet of code saying:</p><p>Try this. <code>&lt;Line(s) of code with no explanation&gt;</code></p><p>Although this snippet may actually be the answer, it doesn’t help the question poster to improve. If the question poster has taken the time to write a well thought-out question (and even if they haven’t) you should provide a good answer rather than perpetuating the cycle of bad answers. There are posts that just contain a link to another website. Links can expire and they don’t really help the question poster solve their issue.</p><p>So here are some tips for writing a good answer.</p><ol><li>Don’t just write a code snippet without any explanation. Make sure you explain why this is the correct solution and why it should be done this way. This helps other users who have similar problems – if your answer has an explanation you will probably get more rep for it.</li></ol><ol start="2"><li>If you are using a link, make sure you summarise the gist of it. Don’t just post the link. As mentioned above, links expire never to be seen again and the value of your answer disappears with the link.</li></ol><ol start="3"><li>Make sure your answer is well researched. SDKs and code bases update frequently. Make sure that if you are referencing a particular code base that you state the versions that your answer works on.</li></ol><ol start="4"><li>Write your answers in such a way that they are accessible to all. There is nothing wrong with ELI5 (Explain like I’m 5) but don’t dumb it too much as you don’t want to sound patronising.</li></ol><br /><p>For more information about writing a good answer check out <a href="https://stackoverflow.com/help/how-to-answer">Stack Overflow’s guide in their help center</a>.</p><h2>Should you post on Stack Overflow?</h2><p><strong>Yes, you absolutely should!</strong> Stack Overflow is a great place to find answers to questions that you didn’t think that you could get an answer to. It can be intimidating writing a question or even answering one. The best advice I can give is take your time, follow the steps above, and read lots of questions and answers before starting out.</p>]]></content:encoded></item></channel></rss>