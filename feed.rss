<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Andrew Marmion</title><description>Coding carefully, deliberately, and with humility.</description><link>https://andrewmarmion.com</link><language>en</language><lastBuildDate>Sat, 7 Nov 2020 20:20:48 +0000</lastBuildDate><pubDate>Sat, 7 Nov 2020 20:20:48 +0000</pubDate><ttl>250</ttl><atom:link href="https://andrewmarmion.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Updating-a-widget-using-AppStorage</guid><title>Updating a Widget using AppStorage</title><description>How to update a SwiftUI Widget when AppStorage updates</description><link>https://andrewmarmion.com/posts/Updating-a-widget-using-AppStorage</link><pubDate>Sat, 7 Nov 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<h1>Updating a Widget using AppStorage</h1><p>One of the new features in iOS 14 is Widgets. These are great and much has been said about them. But one problem that people always seem to struggle with is how to get data from your App into your Widget.</p><p>Well the simplest answer is to use an AppGroup.</p><p>An AppGroup allows the sharing of data between all apps and extensions that have the capability of that AppGroup.</p><p>It is really easy to set up an AppGroup. In each target that you want to share data you add the AppGroup capability. Once this has resolved it should have a name like: <strong>"group.com.my.app.identifier"</strong></p><p>So when dealing with Widgets, you will need to set up an AppGroup in both the App's and the Widget Extension's target, using the same identifier. This now means that they can share the same file system, user defaults, etc.</p><h2>AppStorage</h2><p>AppStorage is just a property wrapper for UserDefaults. The following comes from my <a href="https://stackoverflow.com/a/62602643/5508175">answer</a> about AppStorage on Stackoverflow.<br><br>Looking at the <a href="https://developer.apple.com/documentation/swiftui/appstorage">documentation</a> for <code>@AppStorage</code> the only values that you can currently store using this property wrapper are:</p><ul><li><code>Int</code><ul><li><code>Double</code></li><li><code>String</code></li><li><code>Bool</code></li><li><code>URL</code></li><li><code>Data</code></li></ul></li></ul><br /><p>And their optional counterparts. You can also store values that conform to <code>RawRepresentable</code>, like enums that conform to <code>Int</code> or <code>String</code>.</p><p>If you want to store a dictionary using this method then you would have to convert it to data and store it that way.</p><pre><code><span class="keyword">@AppStorage</span>(<span class="string">"ratings"</span>)
<span class="keyword">var</span> ratings: <span class="type">Data</span> = <span class="type">Data</span>() <span class="comment">// we need to initialize it with something</span>

</code></pre><br /><p>Then we can save to it using</p><pre><code><span class="keyword">let</span> data = [<span class="string">"Hello"</span>: <span class="number">5.0</span>]
<span class="keyword">guard let</span> ratings = <span class="keyword">try</span>? <span class="type">JSONEncoder</span>().<span class="call">encode</span>(data) <span class="keyword">else</span> { <span class="keyword">return</span> }
<span class="keyword">self</span>.<span class="property">ratings</span> = ratings

</code></pre><br /><p>And if we want to retrieve it we can do the following:</p><pre><code><span class="keyword">guard let</span> decodedRatings = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">String</span>:<span class="type">Double</span>].<span class="keyword">self</span>, from: ratings) <span class="keyword">else</span> { <span class="keyword">return</span> }
<span class="call">print</span>(decodedRatings)

</code></pre><h2>Setting the background color of a Widget using AppStorage</h2><p>So this blog post comes off the back off an <a href="https://stackoverflow.com/a/64725875/5508175">answer</a> on Stackoverflow that I gave today.</p><p>The question poster wanted to update the user of the app to be able to pick a colour for the background of the widget. I gave them the following working example:</p><br /><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> WidgetKit

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {

    <span class="keyword">@AppStorage</span>(<span class="string">"color"</span>, store: <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.com.my.app.identifier"</span>))
    <span class="keyword">var</span> colorData: <span class="type">Data</span> = <span class="type">Data</span>()

    <span class="keyword">@State private var</span> bgColor: <span class="type">CGColor</span> = <span class="type">UIColor</span>.<span class="property">systemBackground</span>.<span class="property">cgColor</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {

        <span class="type">ColorPicker</span>(<span class="string">"Color"</span>, selection: <span class="type">Binding</span>(get: {
            bgColor
        }, set: { newValue <span class="keyword">in</span>
            <span class="call">save</span>(color: <span class="type">UIColor</span>(cgColor: newValue))
            bgColor = newValue
        }))
    }

    <span class="keyword">func</span> save(color: <span class="type">UIColor</span>) {
        <span class="keyword">do</span> {
            colorData = <span class="keyword">try</span> <span class="type">NSKeyedArchiver</span>.<span class="call">archivedData</span>(withRootObject: color, requiringSecureCoding: <span class="keyword">false</span>)
            <span class="type">WidgetCenter</span>.<span class="property">shared</span>.<span class="call">reloadAllTimelines</span>()
        } <span class="keyword">catch let</span> error {
            <span class="call">print</span>(<span class="string">"error color key data not saved</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>)
        }
    }
}

</code></pre><br /><p>As we will be storing the picked color as Data we need to set up our <code>@AppStorage</code> property to accept Data, and as we are planning on sharing the Data with an extension, making sure to use <code>UserDefaults(suitname:)</code>.</p><p>Inside the ContentView we set up a <code>ColorPicker</code>. The <code>ColorPicker</code> has the a few initializers, here are two:</p><pre><code><span class="type">ColorPicker</span>(<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, selection: <span class="type">Binding</span>&lt;<span class="type">CGColor</span>&gt;)
<span class="type">ColorPicker</span>(<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, selection: <span class="type">Binding</span>&lt;<span class="type">Color</span>&gt;)

</code></pre><p>The main difference between the initializers is the <code>Binding</code> that they use. It can either be a <code>Binding&lt;Color&gt;</code> or a <code>Binding&lt;CGColor&gt;</code>.</p><p><code>Color</code> is a SwiftUI struct that represents a color, it is a bit more complicated to use but we can create a <code>Color</code> from a <code>UIColor</code> and we can create a <code>UIColor</code> from a <code>CGColor</code>. <code>CGColor</code> doesn't conform to <code>NSCoding</code> or <code>NSObject</code> whereas <code>UIColor</code> does. This means that we will use a <code>ColorPicker</code> with <code>Binding&lt;CGColor&gt;</code> so that we can easily convert it into a <code>UIColor</code> and then in to <code>Data</code> to be stored.</p><p>We use a custom binding with <code>ColorPicker</code>, this is so that we have easy access to the getter and setter of the binding. Doing this means that we can call <code>save(color:)</code> each time the color is updated by the user.</p><p>We can use <code>NSKeyedArchiver</code> to convert the <code>UIColor</code> into data and if that is successful we can update our <code>@AppStorage</code> object (which will save the data into UserDefaults). If it is successful at converting the color into <code>Data</code> we will want to call <code>WidgetCenter.shared.reloadAllTimelines()</code> so that the WidgetCenter knows that changes have occurred and that it should update the timelines.</p><p>Now that we have the ContentView setup, let's construct the Widget.</p><pre><code><span class="keyword">import</span> WidgetKit
<span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> Provider: <span class="type">TimelineProvider</span> {

    <span class="keyword">@AppStorage</span>(<span class="string">"color"</span>, store: <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.com.my.app.identifier"</span>))
    <span class="keyword">var</span> colorData: <span class="type">Data</span> = <span class="type">Data</span>()

    <span class="keyword">func</span> placeholder(in context: <span class="type">Context</span>) -&gt; <span class="type">SimpleEntry</span> {
        <span class="type">SimpleEntry</span>(color: color)
    }

    <span class="keyword">func</span> getSnapshot(in context: <span class="type">Context</span>, completion: <span class="keyword">@escaping</span> (<span class="type">SimpleEntry</span>) -&gt; ()) {
        <span class="keyword">let</span> entry = <span class="type">SimpleEntry</span>(color: color)
        <span class="call">completion</span>(entry)
    }

    <span class="keyword">func</span> getTimeline(in context: <span class="type">Context</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Timeline</span>&lt;<span class="type">Entry</span>&gt;) -&gt; ()) {
        <span class="keyword">let</span> entry = <span class="type">SimpleEntry</span>(color: color)
        <span class="keyword">let</span> timeline = <span class="type">Timeline</span>(entries: [entry], policy: .<span class="dotAccess">atEnd</span>)
        <span class="call">completion</span>(timeline)
    }

    <span class="keyword">var</span> color: <span class="type">UIColor</span> {

        <span class="keyword">var</span> color: <span class="type">UIColor</span>?

        <span class="keyword">do</span> {
            color = <span class="keyword">try</span> <span class="type">NSKeyedUnarchiver</span>.<span class="call">unarchivedObject</span>(ofClass: <span class="type">UIColor</span>.<span class="keyword">self</span>, from: colorData)
        } <span class="keyword">catch let</span> error {
            <span class="call">print</span>(<span class="string">"color error</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>)

        }
        <span class="keyword">return</span> color ?? .<span class="dotAccess">systemBlue</span>
    }
}

<span class="keyword">struct</span> SimpleEntry: <span class="type">TimelineEntry</span> {
    <span class="keyword">let</span> date: <span class="type">Date</span> = <span class="type">Date</span>()
    <span class="keyword">let</span> color: <span class="type">UIColor</span>
}

<span class="keyword">struct</span> MyWidgetEntryView : <span class="type">View</span> {
    <span class="keyword">var</span> entry: <span class="type">Provider</span>.<span class="type">Entry</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ZStack</span> {
            <span class="type">Color</span>(entry.<span class="property">color</span>)
            <span class="type">Text</span>(entry.<span class="property">date</span>, style: .<span class="dotAccess">time</span>)
        }
    }
}

<span class="keyword">@main
struct</span> MyWidget: <span class="type">Widget</span> {
    <span class="keyword">let</span> kind: <span class="type">String</span> = <span class="string">"MyWidget"</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">WidgetConfiguration</span> {
        <span class="type">StaticConfiguration</span>(kind: kind, provider: <span class="type">Provider</span>()) { entry <span class="keyword">in</span>
            <span class="type">MyWidgetEntryView</span>(entry: entry)
        }
        .<span class="call">configurationDisplayName</span>(<span class="string">"My Widget"</span>)
        .<span class="call">description</span>(<span class="string">"This is an example widget."</span>)
    }
}

</code></pre><br /><p>When constructing entries for the widget's timeline we need to pass everything the widget needs at that point. Trying to access resources inside a Widger is not going to work as Widgets are static. This means our <code>@AppStorage</code> has to go inside our <code>Provider</code> struct and not inside <code>MyWidgetEntryView</code> or <code>MyWidget</code> structs. We setup the <code>@AppStorage</code> the same way that we did in the <code>ContentView</code>, using <code>UserDefaults(suitname:)</code> with our <code>AppGroup</code> identifier.</p><p>For ease of access, I created a computed property in the <code>Provider</code> called <code>color</code> that returns a <code>UIColor</code>. This computed property takes the data for the color from <code>@AppStorage</code> and using <code>NSKeyedArchiever</code> unarchives the object as a <code>UIColor</code> we can then use the <code>color</code> property to update our entries. As the color that comes back from the data is optional we need to use <strong>nil-coalescing</strong> to provide a default value, in this cause I have chosen to use <code>.systemBlue</code>.</p><p><code>getTimeline(in:completion:)</code> doesn't require multiple entries as we are only going to show one entry with the user's chosen color so I simplified the logic there.</p><p>I've also updated the SimpleEntry to take a <code>UIColor</code>, and <code>MyWidgetEntryView</code> now has a <code>ZStack</code> that uses the color from the <code>SimpleEntry</code> to set the background color of the view.<br><br></p><p /><h2>In summary</h2><p>Even though it is quite a simple example there is a lot going:</p><ul><li>We set up an <code>AppGroup</code></li><li>We used <code>NSKeyedArchiver</code> to convert a <code>UIColor</code> to <code>Data</code> which was then stored in UserDefaults using <code>@AppStorage</code>.</li><li>We notified <code>WidgetCenter</code> that our Widgets needed reloading.</li><li>We accessed the stored color <code>Data</code> in our <code>Provider</code>.</li><li>We used a computed property to get our <code>UIColor</code> out of <code>@AppStorage</code> but using <code>NSKeyedArchiver.unarchivedObject(ofClass:from:)</code>.</li><li>We updated our <code>Entry</code> to have a color property.</li><li>We also updated <code>MyWidgetEntryView</code> to use the color property of the <code>Entry</code> it had been passed.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Building-and-signing-an-iOS-app-with-Azure-DevOps</guid><title>Building and signing an iOS app using Azure DevOps</title><description>A quick start guide to building your iOS app on Azure Devops</description><link>https://andrewmarmion.com/posts/Building-and-signing-an-iOS-app-with-Azure-DevOps</link><pubDate>Fri, 6 Nov 2020 12:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>Building and signing an iOS app using Azure DevOps</h1><p>Over the years I have used different CI/CD solutions: like Jenkins, Travis, Cricle CI and Bitrise (which is actually my favourite). One that I had not used before was Azue DevOps.</p><p>So I decided to give it a go.</p><p>I have a repo on my GitHub called FizzBuzz, the code for this project comes from a 2015 <a href="https://medium.com/@ynzc/getting-started-with-tdd-in-swift-2fab3e07204b">Medium article</a> by <a href="https://medium.com/@ynzc">Yvette</a> about TDD with Swift. I like using this project for testing CI/CD because it is a functioning app, it has unit tests and it has UI tests. Is it the best example of coding out there? No. But it serves me well for testing CI/CD.</p><h2>Getting Started</h2><p>It is really easy to get started with <a href="https://azure.microsoft.com/en-gb/services/devops/">Azure DevOps</a>. Just click the <strong>Start for free</strong> button.</p><p><a href="../../Images/AzureDevOps/azure-signup.png"><img src="../../Images/AzureDevOps/azure-signup.png" alt="Azure DevOps Signup" style="width:400px;" /></a></p><p>I signed up with an existing Microsoft account that I had, though I believe that you can sign in with your GitHub account and it will create an associated Microsoft account for you.</p><p>Once you are in you can create a new project and from there it is possible to add/clone a repo to it. I cloned my FizzBuzz repo and I was ready to get started.</p><h2>Creating a Pipeline</h2><p>My project doesn't have any dependencies such as CocoaPods or Carthage so I didn't need to worry about installing them. However, to create a signed build I did need to upload the <strong>p12</strong> and the <strong>provisioning profile</strong>.</p><p>Azure DevOps does have a secure area to store these. It took a bit to find where to store them but under the Pipelines section there is a Library, and inside there you can store your files in Secure Files.</p><br /><p><a href="../../Images/AzureDevOps/library.png"><img src="../../Images/AzureDevOps/library.png" alt="Where to store secure files" style="width:400px;" /></a></p><p>Once you have uploaded your files we can get started on creating our pipeline.</p><p>In the Pipeline section you should see a button for creating a new Pipeline. Clicking that takes you through a setup wizard that does the following:</p><h2>Where is the code?</h2><p>This is where your code is located. As I cloned my repo Azure I selected the first option.</p><p><a href="../../Images/AzureDevOps/where-is-your-code.png"><img src="../../Images/AzureDevOps/where-is-your-code.png" alt="Where is your code located" style="width:400px;" /></a></p><h2>Select your repo</h2><p>I only have the one repo in the project so it is fairly obvious which one to select.</p><p><a href="../../Images/AzureDevOps/select-your-repo.png"><img src="../../Images/AzureDevOps/select-your-repo.png" alt="Select your repo" style="width:400px;" /></a></p><h2>Configure</h2><p>There are three options to configure your pipeline.</p><ol><li>Xcode - this is a sample for Xcode build setup</li><li>Starter pipeline - this is a vary basic pipeline</li><li>Existing Azure Pipelines YAML file - this allows you to select an existing pipeline that you can then customize and build from.</li></ol><br /><p><a href="../../Images/AzureDevOps/configure-pipeline.png"><img src="../../Images/AzureDevOps/configure-pipeline.png" alt="Configure the pipeline" style="width:400px;" /></a></p><p>As this was my first pipeline I chose the first option.</p><h2>Review</h2><p>Once you have selected your Configure option you will be presented with a review screen.<br><br>This is the simple Xcode pipeline that it give:</p><p><a href="../../Images/AzureDevOps/review.png"><img src="../../Images/AzureDevOps/review.png" alt="Review the pipeline" style="width:400px;" /></a></p><br /><pre><code># <span class="type">Xcode</span>
# <span class="type">Build</span>, test, and archive an <span class="type">Xcode</span> workspace on macOS.
# <span class="type">Add</span> steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.<span class="property">microsoft</span>.<span class="property">com</span>/azure/devops/pipelines/languages/xcode

trigger:
- master

pool:
  vmImage: 'macos-latest'

steps:
- task: <span class="type">Xcode@5</span>
  inputs:
    actions: 'build'
    scheme: ''
    sdk: 'iphoneos'
    configuration: '<span class="type">Release</span>'
    xcWorkspacePath: '**/*.xcodeproj/project.<span class="property">xcworkspace</span>'
    xcodeVersion: '<span class="keyword">default</span>' # <span class="type">Options</span>: <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, default, specifyPath
    
</code></pre><br /><p>So at this point you can either <strong>Save and run</strong> or just <strong>Save</strong> your pipeline.</p><h2>The pipeline</h2><p>Unfortunately this sample pipeline is not enough for us to create a proper build with a signed ipa.</p><p>However we can add some additional tasks to our yaml file so that we can get a signed build.</p><pre><code># <span class="type">Xcode</span>
# <span class="type">Build</span>, test, and archive an <span class="type">Xcode</span> workspace on macOS.
# <span class="type">Add</span> steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.<span class="property">microsoft</span>.<span class="property">com</span>/azure/devops/pipelines/languages/xcode

trigger:
- master

pool:
  vmImage: 'macos-latest'

steps:
- task: <span class="type">InstallAppleCertificate@2</span>
  displayName: '<span class="type">Install Certificates</span>'
  inputs:
    certSecureFile: '<span class="type">Certificates</span>.<span class="property">p12</span>'
    certPwd: $(<span class="type">P12Password</span>)
    keychain: 'temp'
    deleteCert: <span class="keyword">true</span>  

- task: <span class="type">InstallAppleProvisioningProfile@1</span>
  displayName: '<span class="type">Install Provisioning Profiles</span>'
  inputs:
    provProfileSecureFile: '<span class="type">FizzBuzz</span>.<span class="property">mobileprovision</span>'
    removeProfile: <span class="keyword">true</span>

- task: <span class="type">Xcode@5</span>
  displayName: '<span class="type">Xcode Build</span>'
  inputs:
    actions: 'build'
    scheme: '<span class="type">FizzBuzz</span>'
    sdk: 'iphoneos'
    configuration: '<span class="type">Release</span>'
    xcWorkspacePath: '**/*.xcodeproj/project.<span class="property">xcworkspace</span>'
    xcodeVersion: '<span class="keyword">default</span>' 
    packageApp: <span class="keyword">true</span>
    signingOption: 'manual'
    signingIdentity: '$(<span class="type">APPLE_CERTIFICATE_SIGNING_IDENTITY</span>)'
    provisioningProfileUuid: '$(<span class="type">APPLE_PROV_PROFILE_UUID</span>)'

- task: <span class="type">CopyFiles@2</span>
  displayName: '<span class="type">Copy</span> files'
  inputs:
    contents: '**/*.ipa'
    targetFolder: '$(build.<span class="property">artifactStagingDirectory</span>)'
    overWrite: <span class="keyword">true</span>

- task: <span class="type">PublishBuildArtifacts@1</span>
  displayName: '<span class="type">Publish Artifacts</span>'
  inputs:
    pathtoPublish: '$(build.<span class="property">artifactStagingDirectory</span>)/output/$(sdk)/$(configuration)' 
    artifactName: 'drop' 
    publishLocation: '<span class="type">Container</span>'
    
</code></pre><br /><p>Comparing the sample yaml with our updated yaml we can see there are a few additional tasks that have been added, and we have added a few additional inputs to the</p><p>Tasks that we added:</p><ol><li>Install certificates and provisioning profiles<ol start="2"><li>Build with Xcode</li><li>Copy the ipa</li><li>Publish the artifacts</li></ol></li></ol><br /><h2>1. Installing Certificates and provisioning profiles</h2><p>Earlier on we uploaded our <strong>p12</strong> and our provisioning profile to the <strong>Secure Files</strong> area. This is where we access them.</p><p>So we need to make sure that the values that we enter for <strong>certSecureFile</strong> in the <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/install-apple-certificate?view=azure-devops">InstallAppleCertificate@2</a> and the <strong>provProfileSecureFile</strong> in <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/install-apple-provisioning-profile?view=azure-devops">InstallAppleProvisioningProfile@1</a> match exactly.</p><p>You'll notice that the <strong>InstallAppleCertificate@2</strong> has <strong>certPwd</strong> field. We are using a variable to store the <strong>$(P12Password)</strong> this can be added by clicking the <strong>Variable</strong> options on the right hand side of the screen, and selecting <strong>+</strong> to add the new variable. You <strong>do not</strong> want to store passwords directly in the yaml file, it is not a secure place for such things.</p><pre><code>- task: <span class="type">InstallAppleCertificate@2</span>
  displayName: '<span class="type">Install Certificates</span>'
  inputs:
    certSecureFile: '<span class="type">Certificates</span>.<span class="property">p12</span>'
    certPwd: $(<span class="type">P12Password</span>)
    keychain: 'temp'
    deleteCert: <span class="keyword">true</span>  

- task: <span class="type">InstallAppleProvisioningProfile@1</span>
  displayName: '<span class="type">Install Provisioning Profiles</span>'
  inputs:
    provProfileSecureFile: '<span class="type">FizzBuzz</span>.<span class="property">mobileprovision</span>'
    removeProfile: <span class="keyword">true</span>
    
</code></pre><h2>2. Build with Xcode</h2><p>The <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/xcode?view=azure-devops">Xcode@5</a> task builds and signs our ipa.</p><p>We've explicity set the <strong>scheme</strong> as we may have multiple schemes in our project and this keeps it cleaner and easier to work with. But we have added the following:</p><ol><li><strong>packageApp</strong></li><li><strong>signingOption</strong></li><li><strong>signingIdentity</strong></li><li><strong>provisioningProfileUuid</strong></li></ol><br /><h3>packageApp</h3><br /><p>This tells the build task whether we want to create an ipa or not.</p><h3>signingOption</h3><br /><p>What type of signing we are using. Here we are using <strong>manual</strong>.</p><h3>signingIdentity</h3><br /><p>The value <strong>APPLE_CERTIFICATE_SIGNING_IDENTITY</strong> is captured when the we import the certificate in the step above.</p><h3>provisioningProfileUuid</h3><br /><p>The value <strong>APPLE_PROV_PROFILE_UUID</strong> is captured when we import the provisioning profile in the step above.</p><pre><code>- task: <span class="type">Xcode@5</span>
  displayName: '<span class="type">Xcode Build</span>'
  inputs:
    actions: 'build'
    scheme: '<span class="type">FizzBuzz</span>'
    sdk: 'iphoneos'
    configuration: '<span class="type">Release</span>'
    xcWorkspacePath: '**/*.xcodeproj/project.<span class="property">xcworkspace</span>'
    xcodeVersion: '<span class="keyword">default</span>' 
    packageApp: <span class="keyword">true</span>
    signingOption: 'manual'
    signingIdentity: '$(<span class="type">APPLE_CERTIFICATE_SIGNING_IDENTITY</span>)'
    provisioningProfileUuid: '$(<span class="type">APPLE_PROV_PROFILE_UUID</span>)'
    
</code></pre><h2>3. Copy the ipa</h2><p><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&tabs=yaml">CopyFiles@2</a> copies our built and signed ipa to our target folder. The <strong>overWrite</strong> option just means that it will overwrite the files that we are copying if they already exist. It's not 100% important to have in such a small job as this but it may be important to turn this feature on or off depending on your set up.</p><pre><code>- task: <span class="type">CopyFiles@2</span>
  displayName: '<span class="type">Copy</span> files'
  inputs:
    contents: '**/*.ipa'
    targetFolder: '$(build.<span class="property">artifactStagingDirectory</span>)'
    overWrite: <span class="keyword">true</span>
    
</code></pre><h2>4. Publish the artifacts</h2><p>Once we have copied the files we need to publish them using <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/publish-build-artifacts?view=azure-devops">PublishBuildArtifacts@1</a></p><pre><code>- task: <span class="type">PublishBuildArtifacts@1</span>
  displayName: '<span class="type">Publish Artifacts</span>'
  inputs:
    pathtoPublish: '$(build.<span class="property">artifactStagingDirectory</span>)/output/$(sdk)/$(configuration)' 
    artifactName: 'drop' 
    publishLocation: '<span class="type">Container</span>'
    
</code></pre><h2>Let's build the app.</h2><p>Now that we have updated the pipeline yaml we can build the app.</p><p>So on your pipelines page you can run the pipeline by right clicking the 3 dots on the right hand side and selecting <strong>Run pipeline</strong>. It's that easy. FYI the dots are hidden until you hover over them with your mouse.</p><p><a href="../../Images/AzureDevOps/run-pipeline.png"><img src="../../Images/AzureDevOps/run-pipeline.png" alt="Run the pipeline" style="width:400px;" /></a></p><p>Once you select the branch you want to build from you can then watch your build in real time.</p><br /><p><a href="../../Images/AzureDevOps/build-inprogress.png"><img src="../../Images/AzureDevOps/build-inprogress.png" alt="The build in progress" style="width:400px;" /></a></p><p>Once your pipepline has completed you can review it by selecting <strong>Pipelines</strong> from the left menu and then <strong>Runs</strong> from the tab at the top.</p><p><a href="../../Images/AzureDevOps/runs.png"><img src="../../Images/AzureDevOps/runs.png" alt="Pipeline runs" style="width:400px;" /></a></p><p>Clicking on an individual run we can see more details about it. If you have published any artifacts they will be listed under the <em>Published</em> section on this page. You can click through and download that signed ipa that you have just built. 🎉</p><p><a href="../../Images/AzureDevOps/individual-run.png"><img src="../../Images/AzureDevOps/individual-run.png" alt="Pipeline runs" style="width:400px;" /></a></p><h2>Where next?</h2><p>There are lots that can be done on Azure DevOps and I have just scratched the surface. One thing I would like to look into is deploying the app to App Center, so that it would allow for easy distribution of the app. Another would be capturing the dsyms that have been created and passing them to Apple or Firebase Crashlytics.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Adding-a-CNAME-to-Publish</guid><title>Adding a CNAME to Publish</title><description>How to automatically add a CNAME file when you Publish your blog.</description><link>https://andrewmarmion.com/posts/Adding-a-CNAME-to-Publish</link><pubDate>Thu, 29 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<h1>Adding a CNAME to Publish</h1><p>This blog is currently hosted on Github pages. The actual url is <a href="https://andrewmarmion.github.io">andrewmarmion.github.io</a>, however it is possible to use a custom domain, so the blog now uses the url <a href="https://andrewmarmion.com">andrewmarmion.com</a>, which the former automatically redirects to.</p><p>However, although Publish has the ability to publish straight to Github pages it caused me one infuriating problem. Everytime I published, my custom domain would be removed and I would have to re-add it.</p><p>I discovered that this is because the CNAME file added by Github is removed during <strong>publish deploy</strong>, and after some searching I found that there is a package called <a href="https://github.com/SwiftyGuerrero/CNAMEPublishPlugin">CNAMEPublishPlugin</a> that was able to solve my woes.<br><br>It is really easy to install and use. Add the package to your dependencies in your Package.swift</p><pre><code>dependencies: [
   ...
    .<span class="call">package</span>(name: <span class="string">"CNAMEPublishPlugin"</span>, url: <span class="string">"https://github.com/SwiftyGuerrero/CNAMEPublishPlugin"</span>, from: <span class="string">"0.1.0"</span>)
],

targets: [
    .<span class="call">target</span>(
        name: <span class="string">"MyWebsite"</span>,
        dependencies: [
            ...
            <span class="string">"CNAMEPublishPlugin"</span>
        ]
    )
]

</code></pre><br /><p>Then in your <strong>main.swift</strong> install the plugin.</p><pre><code><span class="keyword">import</span> CNAMEPublishPlugin

<span class="keyword">try</span> <span class="type">MyWebsite</span>()
    .<span class="call">publish</span>(withTheme: .<span class="dotAccess">myTheme</span>,
             plugins: [
                .<span class="call">generateCNAME</span>(with: <span class="string">"andrewmarmion.com"</span>)
             ])
</code></pre><br /><p>Now everytime you build your website a CNAME file will be generated, and will be deployed to your Github page repo.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Find-port-and-kill</guid><title>Find a port and kill</title><description>How to find which process using a specific port and stop it.</description><link>https://andrewmarmion.com/posts/Find-port-and-kill</link><pubDate>Wed, 28 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<h1>Find a port and kill</h1><p>Sometimes when running a local webservice, as a Vapor server or a Python HTML server, things don't always close as you expect. This can leave you stuck when you try to use the service again, finding that the port your service uses is still in use.</p><p>On a Mac you can find which process is currently using your port by running the following command in Terminal.</p><pre><code>sudo lsof -i tcp:<span class="number">8000</span>
</code></pre><br /><p>This will give you output similar to the following</p><pre><code><span class="type">COMMAND   PID          USER   FD   TYPE             DEVICE SIZE</span>/<span class="type">OFF NODE NAME
Python</span>  <span class="number">77963</span> andrewmarmion    3u  <span class="type">IPv4</span> 0xb98da080c366aff7      0t0  <span class="type">TCP</span> *:irdmi (<span class="type">LISTEN</span>)

</code></pre><br /><p>If you want to stop the process that is running you can use the following command:</p><pre><code>kill -<span class="number">15 77963</span> <span class="comment">// kill -15 &lt;PID&gt;</span>
</code></pre><br /><p>Obviously substituting in your PID.</p><p>You can use <strong>-9</strong> instead of <strong>-15</strong>. However using <strong>-9</strong> can leave unwanted artifacts as it does not allow the process that you are killing a chance to end itself, this is because <strong>kill -9</strong> is short for <strong>SIGKILL</strong>. Whereas <strong>kill -15</strong> is short for <strong>SIGTERM</strong> which gives the process a chance to end itself. If <strong>-15</strong> doesn't work then of course use <strong>-9</strong>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Instantiating-a-UIViewController-from-a-storyboard</guid><title>Instantiating a UIViewController from a storyboard</title><description>How to instantiate a UIViewController from a storyboard</description><link>https://andrewmarmion.com/posts/Instantiating-a-UIViewController-from-a-storyboard</link><pubDate>Tue, 27 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<h1>Instantiating a UIViewController from a storyboard</h1><p>One thing that I do frequently when testing code is to load a UIViewController that is contained in a storyboard.</p><p>To make it easier to do, rather than having to write lots of boiler plate code over and over again, I add the following extension to my project.</p><pre><code><span class="keyword">extension</span> <span class="type">UIViewController</span> {
    <span class="comment">/// Instantiates a view controller with an indentifier matching the class name
    /// - Returns: A UIViewController of the specific class</span>
    <span class="keyword">static func</span> instantiate(name: <span class="type">String</span> = <span class="string">"Main"</span>, bundle: <span class="type">Bundle</span>? = <span class="type">Bundle</span>.<span class="property">main</span>) -&gt; <span class="type">Self</span> {
        <span class="keyword">let</span> storyboard = <span class="type">UIStoryboard</span>(name: name, bundle: bundle)
        <span class="keyword">return</span> storyboard.<span class="call">instantiateViewController</span>(identifier: <span class="type">String</span>(describing: <span class="type">Self</span>.<span class="keyword">self</span>)) <span class="keyword">as</span>! <span class="type">Self</span>
    }
}

</code></pre><br /><br /><p>This allows you to easily instantiate a view controller, with one line of code.</p><pre><code><span class="keyword">let</span> viewController: <span class="type">MyNewViewController</span> = <span class="type">MyNewViewController</span>.<span class="call">instantiate</span>()
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/Adding-custom-fonts</guid><title>Adding custom fonts</title><description>How to add a custom font to your iOS project</description><link>https://andrewmarmion.com/posts/Adding-custom-fonts</link><pubDate>Mon, 26 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<h1>Adding custom fonts</h1><p>One thing that you will regularly have to do as an iOS developer is add a custom font to your project. This is not a difficult task but there are several steps that can cause you slip up.</p><p>Here are the steps to make sure that a font is correctly added to your project.</p><ol><li>Add the file to your project.</li><li>Add the filename to your Info.plist.</li><li>Check the actual name of the font.</li><li>Use the font.</li></ol><h2>1. Add the file to your project.</h2><p>This is the easy part. Just drag and drop your font into your project. Make sure that you tick <strong>Copy items if needed</strong> and make sure it is added to the target by checking the box in <strong>Add to targets</strong>.</p><br /><br /><p><a href="../../Images/AddingCustomFonts/copyitems.png"><img src="../../Images/AddingCustomFonts/copyitems.png" alt="Copy items if needed" style="width:400px;" /></a></p><br /><br /><p>Once you have copied it into your project you should have something like this:</p><br /><p><a href="../../Images/AddingCustomFonts/fontInProject.png"><img src="../../Images/AddingCustomFonts/fontInProject.png" alt="Font copied into project" style="width:300px;" /></a></p><br /><br /><p>You will also want to check that the font is being copied during the Build Phase (this step isn't always necessary but it is a good idea to check).</p><p><a href="../../Images/AddingCustomFonts/copiedInBuildPhase.png"><img src="../../Images/AddingCustomFonts/copiedInBuildPhase.png" alt="Font copied in build phase" style="width:400px;" /></a></p><br /><h2>2. Add the filename to your Info.plist</h2><p>This is fairly straight forward. Add the property <strong>Fonts provided by application</strong>. This is an array of strings. You then add the filename of the font, including its extension into the Info.plist.</p><p>You should have something that looks like this:</p><br /><p><a href="../../Images/AddingCustomFonts/infoplist.png"><img src="../../Images/AddingCustomFonts/infoplist.png" alt="Font in info.plist" style="width:400px;" /></a></p><br /><p>If you prefer to edit the plist in code you can add the following, obviously using the filename of your font.</p><pre><code>&lt;key&gt;<span class="type">UIAppFonts</span>&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;<span class="type">HelveticaNowDisplay</span>-<span class="type">Bold</span>.<span class="property">ttf</span>&lt;/string&gt;
&lt;/array&gt;
</code></pre><br /><br /><h2>3 Check the actual name of the font.</h2><p>One thing that can be confusing is that the font name and the filename can be different. This means that if you try to use the filename and it doesn't match the font's name, nothing will show.</p><p>The easiest way to check the font name is to add the following code to your project.</p><br /><pre><code><span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
    <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
    <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
    <span class="keyword">for</span> name <span class="keyword">in</span> names {
        <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
    }
}
</code></pre><br /><br /><p>In a UIKit project you could add this in the AppDelegate in the <code>didFinishLaunchingWithOptions</code> before the <code>return true</code>, or you could add it in a UIViewController in the <code>viewDidLoad</code>.</p><br /><pre><code><span class="keyword">func</span> application(<span class="keyword">_</span> application: <span class="type">UIApplication</span>, 
                 didFinishLaunchingWithOptions launchOptions: [<span class="type">UIApplication</span>.<span class="type">LaunchOptionsKey</span> : <span class="type">Any</span>]? = <span class="keyword">nil</span>) -&gt; <span class="type">Bool</span> {

    <span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
        <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
        <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
        <span class="keyword">for</span> name <span class="keyword">in</span> names {
            <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
        }
    }

    <span class="keyword">return true</span>
}

</code></pre><br /><p>In a SwiftUI project the easiest way is to just add the code in an <code>.onAppear</code> code block like this:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Show me the fonts!"</span>)
            .<span class="call">onAppear</span> {
                <span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
                    <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
                    <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
                    <span class="keyword">for</span> name <span class="keyword">in</span> names {
                        <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
                    }
                }
            }
    }
}
</code></pre><br /><p>Once you run the code you should see something like this in the console:</p><pre><code><span class="type">Family</span>: <span class="type">Helvetica</span>
-&gt; <span class="type">Helvetica</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Oblique</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Light</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">LightOblique</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Bold</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">BoldOblique
Family</span>: <span class="type">Helvetica Neue</span>
-&gt; <span class="type">HelveticaNeue</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Italic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">UltraLight</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">UltraLightItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Thin</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">ThinItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Light</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">LightItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Medium</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">MediumItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Bold</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">BoldItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">CondensedBold</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">CondensedBlack
Family</span>: <span class="type">Helvetica Now Display</span>
-&gt; <span class="type">HelveticaNowDisplay</span>-<span class="type">Bold</span>         <span class="comment">// &lt;- this is the font name we were looking for</span>
<span class="type">Family</span>: <span class="type">Hiragino Maru Gothic ProN</span>
-&gt; <span class="type">HiraMaruProN</span>-<span class="type">W4</span>
</code></pre><br /><p>Notice in my case the font name and the filename match. This is a happy coincidence. Once you have found the name of your font then you should remove the code that you just added.</p><h2>4 . Use the font</h2><p>Now that you have the font name you can use it.</p><br /><h3>Using the font in UIKit</h3><br /><pre><code><span class="keyword">class</span> ViewController: <span class="type">UIViewController</span> {

    <span class="keyword">override func</span> viewDidLoad() {
        <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()

        <span class="keyword">let</span> label = <span class="type">UILabel</span>(frame: .<span class="dotAccess">zero</span>)
        label.<span class="property">text</span> = <span class="string">" HelveticaNowDisplay-Bold"</span>
        label.<span class="property">font</span> = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNowDisplay-Bold"</span>, size: <span class="number">16</span>)

        <span class="keyword">let</span> stack = <span class="type">UIStackView</span>(frame: .<span class="dotAccess">zero</span>)
        stack.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>
        stack.<span class="property">alignment</span> = .<span class="dotAccess">center</span>
        stack.<span class="property">translatesAutoresizingMaskIntoConstraints</span> = <span class="keyword">false</span>

        stack.<span class="call">addArrangedSubview</span>(label)

        view.<span class="call">addSubview</span>(stack)

        <span class="type">NSLayoutConstraint</span>.<span class="call">activate</span>([
            stack.<span class="property">centerYAnchor</span>.<span class="call">constraint</span>(equalTo: view.<span class="property">centerYAnchor</span>),
            stack.<span class="property">centerXAnchor</span>.<span class="call">constraint</span>(equalTo: view.<span class="property">centerXAnchor</span>)
        ])
    }
}
</code></pre><br /><br /><h3>Using the font in SwiftUI</h3><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
            <span class="type">Text</span>(<span class="string">"Hello HelveticaNowDisplay-Bold"</span>)
                .<span class="call">font</span>(<span class="type">Font</span>.<span class="call">custom</span>(<span class="string">"HelveticaNowDisplay-Bold"</span>, size: <span class="number">16</span>))
    }
}
</code></pre><br /><br /><p>Either way you should get the following:</p><br /><p><a href="../../Images/AddingCustomFonts/fontInSimulator.png"><img src="../../Images/AddingCustomFonts/fontInSimulator.png" alt="font shown in simulator" style="width:200px;" /></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.com/posts/100-days-of-stackoverflow</guid><title>100 Days of StackOverflow</title><description>What I learnt from answering questions on Stackoverflow for 100 continuous days.</description><link>https://andrewmarmion.com/posts/100-days-of-stackoverflow</link><pubDate>Sun, 25 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<h1>100 Days of StackOverflow</h1><p>Back in December 2018 I decided to try and complete 100 days of answering questions on <a href="https://www.stackoverflow.com">Stack Overflow</a>. This resulted in me writing a blog post for the company that I was working for at the time. I have since moved on from that company but I still wanted to share the knowledge of what I had gained from the experience. I check in on StackOverflow most days; I answer some questions and I comment on others. Here is the article that I wrote in March 2019.</p><p>As developers it doesn’t take long before you discover <a href="https://www.stackoverflow.com">StackOverflow</a>. A quick search on Google for an error message usually has links to it in the top results.</p><p>Stack Overflow, for those that don’t know what it is, is a website that allows people to post questions on coding problems they are having. In fact, there exists the Stack Exchange, which is a network of 173 Q&amp;A communities, including Stack Overflow. These communities range across a broad range of topics from photography to amateur radio. There is probably a community out there for everyone.</p><p>What makes Stack Overflow so special is that it gathers professionals, students and dabblers all in one place. Anyone can sign up and post or answer a question. This is obviously a double-edged sword as not all questions or answers are created equal. Each user on the website can earn “reputation” as questions and answers can be upvoted and downvoted by the other users of the site. So posting a well-written question or answer can lead to an increase in your reputation and a loss in reputation can occur by posting poorly thought out questions or answers.</p><p>Although I have used Stack Overflow for many years I haven’t really taken full advantage of it. I have been a lurker. I had searched for answers on Stack Overflow but I hadn’t posted my own question or answered anyone else’s. I thought that it was about time that should change. It all happened rather innocuously.</p><p>I had been working on integrating gray box end-to-end testing into an app that I was building when I stumbled upon a question that I could answer. So I took the plunge, researched the topic a little further, and then answered the question. Although my answer wasn’t marked as the “accepted” answer, no other answers were given. I thought that I should try and answer another question or two. I did and was rewarded by having my answer accepted and upvoted (several times). I was hooked… well, not quite!</p><p>Due to work commitments and life just getting in the way, I didn’t really answer any questions for a few months. My reputation sat at around 100 from the questions that I had answered. However, I decided to turn that around and actively give back to the community. So here is what I have learned from answering 200+ questions and completing 100 days of trying to answer at least one question a day.</p><h2>Not all questions deserve an answer</h2><p>Some of the worst questions that I have seen take the following format:</p><p>I get this error. <code>&lt;Error pasted in an unformatted state&gt;</code></p><p>These types of questions aren’t going to illicit a great response from the community. It takes time to write a good question. To make sure that you have given enough information to would-be question responders is not an easy task. I could write for hours on how not to write your question, but here are a few tips for writing better questions:</p><ol><li>First, search and see if you can find a question that is similar to yours. If you find one, then only post another if the answer provided doesn’t fully help you. It is also a good idea to include a link to that original question detailing why yours is different and explain why the answer provided doesn’t answer your query.</li></ol><ol start="2"><li>Make sure your title is related to your question. Good titles mean that more people will look at your question. More people looking, means more people answering.</li></ol><ol start="3"><li>Include the minimum amount of code that is required to replicate the problem that you are having. Links to off-site places like GitHub repos or snacks on Expo are not a good idea as those links could expire, making your question have less meaning in the future.</li></ol><ol start="4"><li>Copy and paste your code/error into the question. Do not post images of your code/error. It makes it hard for those trying to help you. They may want to try out your code but cannot do so easily.</li></ol><ol start="5"><li>Make sure what you are pasting into your question is formatted nicely. The question box has editing tools that can allow you to format your code. Code that is easy to read is easier to answer.</li></ol><ol start="6"><li>List what you have tried. Don’t assume that the possible question answerer has thought of everything you have. Detail it, so that people don’t waste their time writing up an answer when you have already discounted that.</li></ol><br /><p>For more information about creating a Minimal, Complete and Verifiable example check out this post in <a href="https://stackoverflow.com/help/minimal-reproducible-example">Stack Overflow’s help center</a>.</p><h2>Not all answers should be written</h2><p>From what I have seen many people rush to post an answer in the hope of getting a boost to their reputation. They will post a small snippet of code saying:</p><p>Try this. <code>&lt;Line(s) of code with no explanation&gt;</code></p><p>Although this snippet may actually be the answer, it doesn’t help the question poster to improve. If the question poster has taken the time to write a well thought-out question (and even if they haven’t) you should provide a good answer rather than perpetuating the cycle of bad answers. There are posts that just contain a link to another website. Links can expire and they don’t really help the question poster solve their issue.</p><p>So here are some tips for writing a good answer.</p><ol><li>Don’t just write a code snippet without any explanation. Make sure you explain why this is the correct solution and why it should be done this way. This helps other users who have similar problems – if your answer has an explanation you will probably get more rep for it.</li></ol><ol start="2"><li>If you are using a link, make sure you summarise the gist of it. Don’t just post the link. As mentioned above, links expire never to be seen again and the value of your answer disappears with the link.</li></ol><ol start="3"><li>Make sure your answer is well researched. SDKs and code bases update frequently. Make sure that if you are referencing a particular code base that you state the versions that your answer works on.</li></ol><ol start="4"><li>Write your answers in such a way that they are accessible to all. There is nothing wrong with ELI5 (Explain like I’m 5) but don’t dumb it too much as you don’t want to sound patronising.</li></ol><br /><p>For more information about writing a good answer check out <a href="https://stackoverflow.com/help/how-to-answer">Stack Overflow’s guide in their help center</a>.</p><h2>Should you post on Stack Overflow?</h2><p><strong>Yes, you absolutely should!</strong> Stack Overflow is a great place to find answers to questions that you didn’t think that you could get an answer to. It can be intimidating writing a question or even answering one. The best advice I can give is take your time, follow the steps above, and read lots of questions and answers before starting out.</p>]]></content:encoded></item></channel></rss>