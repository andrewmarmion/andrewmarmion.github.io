<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Andrew Marmion</title><description>Coding carefully, deliberately, and with humility.</description><link>https://andrewmarmion.github.io</link><language>en</language><lastBuildDate>Mon, 26 Oct 2020 10:34:12 +0000</lastBuildDate><pubDate>Mon, 26 Oct 2020 10:34:12 +0000</pubDate><ttl>250</ttl><atom:link href="https://andrewmarmion.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://andrewmarmion.github.io/posts/Adding-custom-fonts</guid><title>Adding custom fonts</title><description>How to add a custom font to your iOS project</description><link>https://andrewmarmion.github.io/posts/Adding-custom-fonts</link><pubDate>Mon, 26 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<h1>Adding custom fonts</h1><p>One thing that you will regularly have to do as an iOS developer is add a custom font to your project. This is not a difficult task but there are several steps that can cause you slip up.</p><p>Here are the steps to make sure that a font is correctly added to your project.</p><ol><li>Add the file to your project.</li><li>Add the filename to your Info.plist.</li><li>Check the actual name of the font.</li><li>Use the font.</li></ol><h2>1. Add the file to your project.</h2><p>This is the easy part. Just drag and drop your font into your project. Make sure that you tick <strong>Copy items if needed</strong> and make sure it is added to the target by checking the box in <strong>Add to targets</strong>.</p><br /><br /><p><a href="../../Images/AddingCustomFonts/copyitems.png"><img src="../../Images/AddingCustomFonts/copyitems.png" alt="Copy items if needed" style="width:400px;" /></a></p><br /><br /><p>Once you have copied it into your project you should have something like this:</p><br /><p><a href="../../Images/AddingCustomFonts/fontInProject.png"><img src="../../Images/AddingCustomFonts/fontInProject.png" alt="Font copied into project" style="width:300px;" /></a></p><br /><br /><p>You will also want to check that the font is being copied during the Build Phase (this step isn't always necessary but it is a good idea to check).</p><p><a href="../../Images/AddingCustomFonts/copiedInBuildPhase.png"><img src="../../Images/AddingCustomFonts/copiedInBuildPhase.png" alt="Font copied in build phase" style="width:400px;" /></a></p><br /><h2>2. Add the filename to your Info.plist</h2><p>This is fairly straight forward. Add the property <strong>Fonts provided by application</strong>. This is an array of strings. You then add the filename of the font, including its extension into the Info.plist.</p><p>You should have something that looks like this:</p><br /><p><a href="../../Images/AddingCustomFonts/infoplist.png"><img src="../../Images/AddingCustomFonts/infoplist.png" alt="Font in info.plist" style="width:400px;" /></a></p><br /><p>If you prefer to edit the plist in code you can add the following, obviously using the filename of your font.</p><pre><code>&lt;key&gt;<span class="type">UIAppFonts</span>&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;<span class="type">HelveticaNowDisplay</span>-<span class="type">Bold</span>.<span class="property">ttf</span>&lt;/string&gt;
&lt;/array&gt;
</code></pre><br /><br /><h2>3 Check the actual name of the font.</h2><p>One thing that can be confusing is that the font name and the filename can be different. This means that if you try to use the filename and it doesn't match the font's name, nothing will show.</p><p>The easiest way to check the font name is to add the following code to your project.</p><br /><pre><code><span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
    <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
    <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
    <span class="keyword">for</span> name <span class="keyword">in</span> names {
        <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
    }
}
</code></pre><br /><br /><p>In a UIKit project you could add this in the AppDelegate in the <code>didFinishLaunchingWithOptions</code> before the <code>return true</code>, or you could add it in a UIViewController in the <code>viewDidLoad</code>.</p><br /><pre><code><span class="keyword">func</span> application(<span class="keyword">_</span> application: <span class="type">UIApplication</span>, 
                 didFinishLaunchingWithOptions launchOptions: [<span class="type">UIApplication</span>.<span class="type">LaunchOptionsKey</span> : <span class="type">Any</span>]? = <span class="keyword">nil</span>) -&gt; <span class="type">Bool</span> {

    <span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
        <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
        <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
        <span class="keyword">for</span> name <span class="keyword">in</span> names {
            <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
        }
    }

    <span class="keyword">return true</span>
}

</code></pre><br /><p>In a SwiftUI project the easiest way is to just add the code in an <code>.onAppear</code> code block like this:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Show me the fonts!"</span>)
            .<span class="call">onAppear</span> {
                <span class="keyword">for</span> family <span class="keyword">in</span> <span class="type">UIFont</span>.<span class="property">familyNames</span>.<span class="call">sorted</span>() {
                    <span class="keyword">let</span> names = <span class="type">UIFont</span>.<span class="call">fontNames</span>(forFamilyName: family)
                    <span class="call">print</span>(<span class="string">"Family:</span> \(family)<span class="string">"</span>)
                    <span class="keyword">for</span> name <span class="keyword">in</span> names {
                        <span class="call">print</span>(<span class="string">"-&gt;</span> \(name)<span class="string">"</span>)
                    }
                }
            }
    }
}
</code></pre><br /><p>Once you run the code you should see something like this in the console:</p><pre><code><span class="type">Family</span>: <span class="type">Helvetica</span>
-&gt; <span class="type">Helvetica</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Oblique</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Light</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">LightOblique</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">Bold</span>
-&gt; <span class="type">Helvetica</span>-<span class="type">BoldOblique
Family</span>: <span class="type">Helvetica Neue</span>
-&gt; <span class="type">HelveticaNeue</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Italic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">UltraLight</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">UltraLightItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Thin</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">ThinItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Light</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">LightItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Medium</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">MediumItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">Bold</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">BoldItalic</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">CondensedBold</span>
-&gt; <span class="type">HelveticaNeue</span>-<span class="type">CondensedBlack
Family</span>: <span class="type">Helvetica Now Display</span>
-&gt; <span class="type">HelveticaNowDisplay</span>-<span class="type">Bold</span>         <span class="comment">// &lt;- this is the font name we were looking for</span>
<span class="type">Family</span>: <span class="type">Hiragino Maru Gothic ProN</span>
-&gt; <span class="type">HiraMaruProN</span>-<span class="type">W4</span>
</code></pre><br /><p>Notice in my case the font name and the filename match. This is a happy coincidence. Once you have found the name of your font then you should remove the code that you just added.</p><h2>4 . Use the font</h2><p>Now that you have the font name you can use it.</p><br /><h3>Using the font in UIKit</h3><br /><pre><code><span class="keyword">class</span> ViewController: <span class="type">UIViewController</span> {

    <span class="keyword">override func</span> viewDidLoad() {
        <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()

        <span class="keyword">let</span> label = <span class="type">UILabel</span>(frame: .<span class="dotAccess">zero</span>)
        label.<span class="property">text</span> = <span class="string">" HelveticaNowDisplay-Bold"</span>
        label.<span class="property">font</span> = <span class="type">UIFont</span>(name: <span class="string">"HelveticaNowDisplay-Bold"</span>, size: <span class="number">16</span>)

        <span class="keyword">let</span> stack = <span class="type">UIStackView</span>(frame: .<span class="dotAccess">zero</span>)
        stack.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>
        stack.<span class="property">alignment</span> = .<span class="dotAccess">center</span>
        stack.<span class="property">translatesAutoresizingMaskIntoConstraints</span> = <span class="keyword">false</span>

        stack.<span class="call">addArrangedSubview</span>(label)

        view.<span class="call">addSubview</span>(stack)

        <span class="type">NSLayoutConstraint</span>.<span class="call">activate</span>([
            stack.<span class="property">centerYAnchor</span>.<span class="call">constraint</span>(equalTo: view.<span class="property">centerYAnchor</span>),
            stack.<span class="property">centerXAnchor</span>.<span class="call">constraint</span>(equalTo: view.<span class="property">centerXAnchor</span>)
        ])
    }
}
</code></pre><br /><br /><h3>Using the font in SwiftUI</h3><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
            <span class="type">Text</span>(<span class="string">"Hello HelveticaNowDisplay-Bold"</span>)
                .<span class="call">font</span>(<span class="type">Font</span>.<span class="call">custom</span>(<span class="string">"HelveticaNowDisplay-Bold"</span>, size: <span class="number">16</span>))
    }
}
</code></pre><br /><br /><p>Either way you should get the following:</p><br /><p><a href="../../Images/AddingCustomFonts/fontInSimulator.png"><img src="../../Images/AddingCustomFonts/fontInSimulator.png" alt="font shown in simulator" style="width:200px;" /></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://andrewmarmion.github.io/posts/100-days-of-stackoverflow</guid><title>100 Days of StackOverflow</title><description>What I learnt from answering questions on Stackoverflow for 100 continuous days.</description><link>https://andrewmarmion.github.io/posts/100-days-of-stackoverflow</link><pubDate>Sun, 25 Oct 2020 12:04:00 +0000</pubDate><content:encoded><![CDATA[<h1>100 Days of StackOverflow</h1><p>Back in December 2018 I decided to try and complete 100 days of answering questions on <a href="https://www.stackoverflow.com">Stack Overflow</a>. This resulted in me writing a blog post for the company that I was working for at the time. I have since moved on from that company but I still wanted to share the knowledge of what I had gained from the experience. I check in on StackOverflow most days; I answer some questions and I comment on others. Here is the article that I wrote in March 2019.</p><p>As developers it doesn’t take long before you discover <a href="https://www.stackoverflow.com">StackOverflow</a>. A quick search on Google for an error message usually has links to it in the top results.</p><p>Stack Overflow, for those that don’t know what it is, is a website that allows people to post questions on coding problems they are having. In fact, there exists the Stack Exchange, which is a network of 173 Q&amp;A communities, including Stack Overflow. These communities range across a broad range of topics from photography to amateur radio. There is probably a community out there for everyone.</p><p>What makes Stack Overflow so special is that it gathers professionals, students and dabblers all in one place. Anyone can sign up and post or answer a question. This is obviously a double-edged sword as not all questions or answers are created equal. Each user on the website can earn “reputation” as questions and answers can be upvoted and downvoted by the other users of the site. So posting a well-written question or answer can lead to an increase in your reputation and a loss in reputation can occur by posting poorly thought out questions or answers.</p><p>Although I have used Stack Overflow for many years I haven’t really taken full advantage of it. I have been a lurker. I had searched for answers on Stack Overflow but I hadn’t posted my own question or answered anyone else’s. I thought that it was about time that should change. It all happened rather innocuously.</p><p>I had been working on integrating gray box end-to-end testing into an app that I was building when I stumbled upon a question that I could answer. So I took the plunge, researched the topic a little further, and then answered the question. Although my answer wasn’t marked as the “accepted” answer, no other answers were given. I thought that I should try and answer another question or two. I did and was rewarded by having my answer accepted and upvoted (several times). I was hooked… well, not quite!</p><p>Due to work commitments and life just getting in the way, I didn’t really answer any questions for a few months. My reputation sat at around 100 from the questions that I had answered. However, I decided to turn that around and actively give back to the community. So here is what I have learned from answering 200+ questions and completing 100 days of trying to answer at least one question a day.</p><h2>Not all questions deserve an answer</h2><p>Some of the worst questions that I have seen take the following format:</p><p>I get this error. <code>&lt;Error pasted in an unformatted state&gt;</code></p><p>These types of questions aren’t going to illicit a great response from the community. It takes time to write a good question. To make sure that you have given enough information to would-be question responders is not an easy task. I could write for hours on how not to write your question, but here are a few tips for writing better questions:</p><ol><li>First, search and see if you can find a question that is similar to yours. If you find one, then only post another if the answer provided doesn’t fully help you. It is also a good idea to include a link to that original question detailing why yours is different and explain why the answer provided doesn’t answer your query.</li></ol><ol start="2"><li>Make sure your title is related to your question. Good titles mean that more people will look at your question. More people looking, means more people answering.</li></ol><ol start="3"><li>Include the minimum amount of code that is required to replicate the problem that you are having. Links to off-site places like GitHub repos or snacks on Expo are not a good idea as those links could expire, making your question have less meaning in the future.</li></ol><ol start="4"><li>Copy and paste your code/error into the question. Do not post images of your code/error. It makes it hard for those trying to help you. They may want to try out your code but cannot do so easily.</li></ol><ol start="5"><li>Make sure what you are pasting into your question is formatted nicely. The question box has editing tools that can allow you to format your code. Code that is easy to read is easier to answer.</li></ol><ol start="6"><li>List what you have tried. Don’t assume that the possible question answerer has thought of everything you have. Detail it, so that people don’t waste their time writing up an answer when you have already discounted that.</li></ol><br /><p>For more information about creating a Minimal, Complete and Verifiable example check out this post in <a href="https://stackoverflow.com/help/minimal-reproducible-example">Stack Overflow’s help center</a>.</p><h2>Not all answers should be written</h2><p>From what I have seen many people rush to post an answer in the hope of getting a boost to their reputation. They will post a small snippet of code saying:</p><p>Try this. <code>&lt;Line(s) of code with no explanation&gt;</code></p><p>Although this snippet may actually be the answer, it doesn’t help the question poster to improve. If the question poster has taken the time to write a well thought-out question (and even if they haven’t) you should provide a good answer rather than perpetuating the cycle of bad answers. There are posts that just contain a link to another website. Links can expire and they don’t really help the question poster solve their issue.</p><p>So here are some tips for writing a good answer.</p><ol><li>Don’t just write a code snippet without any explanation. Make sure you explain why this is the correct solution and why it should be done this way. This helps other users who have similar problems – if your answer has an explanation you will probably get more rep for it.</li></ol><ol start="2"><li>If you are using a link, make sure you summarise the gist of it. Don’t just post the link. As mentioned above, links expire never to be seen again and the value of your answer disappears with the link.</li></ol><ol start="3"><li>Make sure your answer is well researched. SDKs and code bases update frequently. Make sure that if you are referencing a particular code base that you state the versions that your answer works on.</li></ol><ol start="4"><li>Write your answers in such a way that they are accessible to all. There is nothing wrong with ELI5 (Explain like I’m 5) but don’t dumb it too much as you don’t want to sound patronising.</li></ol><br /><p>For more information about writing a good answer check out <a href="https://stackoverflow.com/help/how-to-answer">Stack Overflow’s guide in their help center</a>.</p><h2>Should you post on Stack Overflow?</h2><p><strong>Yes, you absolutely should!</strong> Stack Overflow is a great place to find answers to questions that you didn’t think that you could get an answer to. It can be intimidating writing a question or even answering one. The best advice I can give is take your time, follow the steps above, and read lots of questions and answers before starting out.</p>]]></content:encoded></item></channel></rss>